{"version":3,"file":"index.0f43a6f5.js","sources":["../node_modules/_@ant-design_icons-svg@4.2.1@@ant-design/icons-svg/es/asn/ArrowsAltOutlined.js","../node_modules/_@ant-design_icons@4.8.0@@ant-design/icons/es/icons/ArrowsAltOutlined.js","../src/pages/messageForwarding/columns.tsx","../src/assets/mqtt.png","../src/pages/messageForwarding/index.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar ArrowsAltOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M855 160.1l-189.2 23.5c-6.6.8-9.3 8.8-4.7 13.5l54.7 54.7-153.5 153.5a8.03 8.03 0 000 11.3l45.1 45.1c3.1 3.1 8.2 3.1 11.3 0l153.6-153.6 54.7 54.7a7.94 7.94 0 0013.5-4.7L863.9 169a7.9 7.9 0 00-8.9-8.9zM416.6 562.3a8.03 8.03 0 00-11.3 0L251.8 715.9l-54.7-54.7a7.94 7.94 0 00-13.5 4.7L160.1 855c-.6 5.2 3.7 9.5 8.9 8.9l189.2-23.5c6.6-.8 9.3-8.8 4.7-13.5l-54.7-54.7 153.6-153.6c3.1-3.1 3.1-8.2 0-11.3l-45.2-45z\" } }] }, \"name\": \"arrows-alt\", \"theme\": \"outlined\" };\nexport default ArrowsAltOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ArrowsAltOutlinedSvg from \"@ant-design/icons-svg/es/asn/ArrowsAltOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar ArrowsAltOutlined = function ArrowsAltOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: ArrowsAltOutlinedSvg\n  }));\n};\nArrowsAltOutlined.displayName = 'ArrowsAltOutlined';\nexport default /*#__PURE__*/React.forwardRef(ArrowsAltOutlined);","import React from \"react\";\n\nimport {Badge, Switch, Tag} from \"antd\";\n\nconst columns = {\n    \"url\": \"/fyHome/dws-ppl-particular-baseinfo/selectDwsPplParticularBaseinfoPage\",\n    \"params\": {},\n    \"checkBox\": true,\n    \"operation\": [\n        {\"name\": \"踢除\", \"type\": \"disabled\", \"drawerWidth\": \"50\"},\n    ],\n    \"searchListType\": \"multipleQuery\",\n    \"searchList\": [\n        {\"title\": \"关键字\", \"type\": \"input\", \"key\": \"name\", \"placeholder\": \"请输入\"},\n    ],\n    \"tableColumns\": [\n        {\n            title: 'IP地址',\n            key: 'ipPort',\n            dataIndex: 'ipPort',\n            width: \"10%\",\n            align: 'center',\n        },\n        {\n            title: '状态',\n            key: 'status',\n            dataIndex: 'status',\n            width: \"10%\",\n            align: 'center',\n            render: (text: any) => {\n                if (text) {\n                    return <Badge status=\"processing\" text=\"已连接\"/>\n                } else {\n                    return <Badge status=\"processing\" text=\"未连接\"/>\n                }\n            },\n        },\n        {\n            title: '心跳(s)',\n            key: 'heartbeat',\n            dataIndex: 'heartbeat',\n            width: \"10%\",\n            align: 'center',\n        },\n        {\n            title: '连接时间',\n            key: 'connectionTime',\n            dataIndex: 'connectionTime',\n            width: \"10%\",\n            align: 'center',\n        },\n    ],\n    \"mqttTableColumns\": [\n        {\n            title: '客户端ID',\n            key: 'channelId',\n            dataIndex: 'channelId',\n            width: \"10%\",\n            align: 'center',\n        },\n        {\n            title: '用户名',\n            key: 'name',\n            dataIndex: 'name',\n            width: \"10%\",\n            align: 'center',\n        },\n        {\n            title: '状态',\n            key: 'status',\n            dataIndex: 'status',\n            width: \"10%\",\n            align: 'center',\n            render: (text: any) => {\n                if (text) {\n                    return <Badge status=\"processing\" text=\"已连接\"/>\n                } else {\n                    return <Badge status=\"processing\" text=\"未连接\"/>\n                }\n            },\n        },\n        {\n            title: '心跳(s)',\n            key: 'heartbeat',\n            dataIndex: 'heartbeat',\n            width: \"10%\",\n            align: 'center',\n        },\n        {\n            title: '连接时间',\n            key: 'connectionTime',\n            dataIndex: 'connectionTime',\n            width: \"10%\",\n            align: 'center',\n        },\n    ]\n}\nexport default columns\n","export default \"__VITE_ASSET__3d0927c9__\"","import React, {useEffect, useState} from \"react\";\nimport {connect} from \"dva\";\nimport {\n    Table,\n    Button,\n    Drawer,\n    Modal,\n    Form,\n    Checkbox,\n    Space,\n    Input,\n    Switch,\n    Tree,\n    message,\n    Select,\n    Upload,\n    Badge\n} from \"antd\";\n\nconst {TextArea} = Input;\nconst {Search} = Input;\nconst {Option} = Select;\nconst {Column} = Table;\n\nimport columns from './columns';\nimport styles from \"./style.module.less\";\nimport {\n    ArrowsAltOutlined,\n    CaretRightOutlined,\n    EditOutlined,\n    FallOutlined,\n    PlusCircleOutlined, PoweroffOutlined,\n    RiseOutlined\n} from \"@ant-design/icons\";\nimport mqtt from \"@/assets/mqtt.png\";\nimport websocket from \"@/assets/websocket.png\";\nimport {WS_SERVER} from \"@/services/global\";\nimport { otherUrl } from \"@/services/request\";\n\nconst MessageForwarding = (props: any) => {\n    const {dispatch, select} = props;\n    const [form] = Form.useForm();\n    const [visible, setVisible] = useState(false);\n    const [DETAIL, setDETAIL] = useState({}); /* 表格详情 */\n\n    const [listMessageForwarding, setListMessageForwarding] = useState([]);\n    const [linksSwitch, setLinksSwitch] = useState<boolean>(true);\n\n\n    const [formTitle, setFormTitle] = useState<string>('');//弹框标题\n    const [formIsModalVisible, setFormlIsModalVisible] = useState(false);//弹框状态，是否显示\n    const [formData, setFormData] = useState<any>({});//弹框表单信息\n\n\n    const [serviceList, setServiceList] = useState([]);\n    const [serviceCurrentPage, setServiceCurrentPage] = useState<any>({pageNo: 1});\n    const [serviceTotalPage, setServiceTotalPage] = useState<number>(0);\n\n\n    useEffect(() => {\n        getMessageForwarding()\n\n\n    }, []);\n\n    // 查询所有连接\n    const getMessageForwarding = () => {\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'GET',\n            url: \"/data-acquisition/message-forwarding\",\n            payload: {},\n            callback: (res: any) => {\n                if (res.success) {\n                    let list = res.data;\n                    setListMessageForwarding(list)\n\n\n                    linksForwarding(\n                        'getSocketState',\n                        {\"moduleIds\": null, \"pointIds\": null, \"type\": \"sendSocketState\"},\n                        list\n                    );\n\n                }\n            },\n        });\n    }\n\n\n    /* 转发 编辑  */\n    const editForwarding = (item) => {\n        setFormTitle(item.serviceName);\n        setFormData(item)\n        setFormlIsModalVisible(true);\n    }\n    const linksForwarding = (status, item, data) => {\n\n        if (status === 'getMQTTSubscribe') {\n\n            getMQTTSubscribe(item, data);\n            return\n        }\n\n        const wsAddWebScoket = new WebSocket( `ws://${WS_SERVER}:15420/ws/socket`);\n\n        wsAddWebScoket.onmessage = (e) => {\n            console.log(\"客户端接收服务端数据时触发\", e)\n\n            // 获取开关状态\n            if (e && status === \"getSocketState\") {\n                getSocketState(e.data, data);\n            }\n            // 获取服务列表数据\n            if (e && status === 'getSocketServer') {\n                console.log(JSON.parse(e.data))\n                const res = e.data ? JSON.parse(e.data) : [];\n                getSocketServer(res, data);\n            }\n        };\n        wsAddWebScoket.onopen = (e) => {\n            console.log(\"建立连接时触发\", e);\n            // wsAddWebScoket.send(JSON.stringify(item));\n\n            wsAddWebScoket.send(JSON.stringify(item));\n        };\n        wsAddWebScoket.onclose = (e) => {\n            console.log(\"连接错误时触发\", e);\n        };\n        wsAddWebScoket.onerror = (e) => {\n            console.log(\"通信错误时触发\", e);\n        };\n    }\n\n\n    const getSocketState = (val, list) => {\n\n\n        const arrs = list.map(item => {\n            if (item.id === 1) {\n                return {\n                    ...item,\n                    status: val === '1' ? 'processing' : 'default',\n                    statusName: val === '1' ? '已启用' : '已停用'\n                }\n            } else {\n                return item\n            }\n        });\n        setListMessageForwarding(arrs)\n    }\n\n    const getSocketServer = (res, data) => {\n\n        const list = res && res.map(item => {\n            return JSON.parse(item)\n        });\n\n        setServiceList(list);\n\n        setFormTitle(data.serviceName);\n        setFormData(data);\n        setVisible(true);\n    }\n    const getMQTTSubscribe = (res, data) => {\n\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'get',\n            url: otherUrl+'/data_collect/mqttController/getRoutesAll',\n            payload: {},\n            callback: (_data: any) => {\n                if (_data.success) {\n                    console.log(_data)\n\n                    setServiceList([]);\n\n                    setFormTitle(data.serviceName);\n                    setFormData(data);\n                    setVisible(true);\n                }\n            },\n        });\n    }\n    const getMQTTServer = (res, data) => {\n\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'get',\n            url: otherUrl+'/data_collect/mqttController/getMqttClientAll',\n            payload: {},\n            callback: (_data: any) => {\n                if (_data.success) {\n                    console.log(_data)\n\n                    setServiceList([]);\n\n                    setFormTitle(data.serviceName);\n                    setFormData(data);\n                    setVisible(true);\n                }\n            },\n        });\n    }\n\n    /* 踢除 */\n    const deleteForwarding = (record: any) => {\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'post',\n            url: otherUrl+'/data_collect/SeocketController/removeClient',\n            payload: {\n                \"channelId\": record.channelId\n            },\n            callback: (_data: any) => {\n                if (_data.success) {\n                    message.success('踢除成功');\n                }\n            },\n        });\n    }\n\n    const clickOpenClose = (item: any) => {\n        console.log(item)\n        let _url = item.id === 1 ? otherUrl+'/data_collect/SeocketController/websocketServerAndStart' : \"\"\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'post',\n            url: _url,\n            payload: {\n                stopAndStart: item.status === 'processing' ? '0' : '1',\n            },\n            callback: (_data: any) => {\n                console.log(_data)\n                const data = {\n                    ...item,\n                    status: _data.data === '已启用' ? 'processing' : 'default',\n                    statusName: _data.data\n                }\n                setFormData(data)\n\n                const list = listMessageForwarding.map(i => {\n                    if (i.id === item.id) {\n                        return data\n                    }\n                    return i\n                })\n                setListMessageForwarding(list)\n            },\n        });\n    }\n\n\n    const addOrUpdate = () => {\n\n\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'post',\n            url: \"/data-acquisition/message-forwarding/update\",\n            payload: {\n                ...formData,\n            },\n            callback: (res: any) => {\n                console.log(res)\n                if (res.success) {\n                    setFormlIsModalVisible(false);\n                    getMessageForwarding()\n                }\n            },\n        });\n    }\n\n    const onFinish = (values: any) => {\n        console.log(values);\n\n    };\n\n    const getDrawerTitle = () => {\n        return <div>\n            <span style={{marginRight: \"40px\"}}>{formTitle}</span>\n            <span style={{marginRight: \"40px\", fontWeight: 400}}>已启用</span>\n            <span style={{marginRight: \"40px\", fontWeight: 400}}>端口号: {DETAIL.portNumber}</span>\n            {\n                formTitle.includes(\"MQTT\") ? <>\n                    <span style={{marginRight: \"40px\", fontWeight: 400}}>用户名: {DETAIL.username}</span>\n                    <span style={{marginRight: \"40px\", fontWeight: 400}}>密码: {DETAIL.password}</span></> : ''\n            }\n        </div>\n    }\n\n    return (<div className={styles['messageForwarding']}>\n\n\n            <div className={styles['box']}>\n\n                {\n                    listMessageForwarding.map((item, index) => {\n                        return <div key={index} className={styles['banner']}>\n\n                            <div className={styles['logo']}>\n                                <img src={mqtt}/>\n                            </div>\n                            <div className={styles['info']}>\n                                <div className={styles['title']}>{item.serviceName}</div>\n                                <div>端口号: {item.portNumber}</div>\n\n                                {\n                                    item.username ? <>\n                                        <div>用户名: {item.username}</div>\n                                        <div style={{display:\"flex\",alignItems:\"center\"}}>密码:\n\n                                            <Input.Password value={item.password} bordered={false} style={{width:\"100px\"}} />\n\n                                        </div>\n                                    </> : ''\n                                }\n\n\n                                <div><Badge status={item.status} text={item.statusName}/></div>\n                            </div>\n                            <div className={styles['btn']}>\n                                <Button icon={<EditOutlined/>} onClick={() => {\n                                    editForwarding(item)\n                                }} type=\"primary\" ghost>\n                                    编辑\n                                </Button>\n                                <Button onClick={() => {\n                                    clickOpenClose(item, index)\n                                }}\n                                        icon={item.status === 'processing' ? <CaretRightOutlined/> :\n                                            <PoweroffOutlined/>}\n                                        type={item.status === 'processing' ? 'danger' : 'primary'}\n                                        ghost>\n                                    {item.status === 'processing' ? '停用' : '启用'}\n                                </Button>\n                                <Button icon={<ArrowsAltOutlined/>} onClick={() => {\n                                    setDETAIL(item)\n\n                                    if (item.id === 1 && item.statusName === '已停用') {\n                                        message.warning(\"请先启用服务\")\n                                        return\n                                    }\n                                    linksForwarding(item.id === 1 ? 'getSocketServer' : 'getMQTTSubscribe',\n                                        {\n                                            \"moduleIds\": null,\n                                            \"pointIds\": null,\n                                            \"type\": \"getSocketAllClientInformation\"\n                                        }, item)\n                                }} type=\"primary\" ghost>\n                                    连接管理\n                                </Button>\n                            </div>\n\n                        </div>\n                    })\n                }\n\n                {/*<div className={styles['banner']}>*/}\n                {/*    <div className={styles['logo']}>*/}\n                {/*        <img src={mqtt}/>*/}\n                {/*    </div>*/}\n                {/*    <div className={styles['info']}>*/}\n                {/*        <div className={styles['title']}>MQTT服务器</div>*/}\n                {/*        <div>端口号: 8083</div>*/}\n                {/*        <div>用户名: zhangsansan</div>*/}\n                {/*        <div>密码: 123456</div>*/}\n                {/*        <div><Badge status=\"processing\" text=\"已连接\"/></div>*/}\n                {/*    </div>*/}\n                {/*    <div className={styles['btn']}>*/}\n                {/*        <Button icon={<EditOutlined/>} onClick={() => {*/}\n                {/*            editForwarding('MQTT服务器')*/}\n                {/*        }} type=\"primary\" ghost>*/}\n                {/*            编辑*/}\n                {/*        </Button>*/}\n                {/*        <Button icon={linksSwitch ? <CaretRightOutlined/> : <PoweroffOutlined/>} type=\"primary\" ghost>*/}\n                {/*            启用*/}\n                {/*        </Button>*/}\n                {/*        <Button icon={<ArrowsAltOutlined/>} onClick={() => {*/}\n                {/*            linksForwarding('MQTT服务器')*/}\n                {/*        }} type=\"primary\" ghost>*/}\n                {/*            连接管理*/}\n                {/*        </Button>*/}\n                {/*    </div>*/}\n                {/*</div>*/}\n            </div>\n\n            <Drawer title={getDrawerTitle()} placement=\"right\" onClose={() => {\n                setDETAIL({})\n                setVisible(false)\n\n                getMessageForwarding()\n            }} visible={visible} width={'60vw'}>\n                <div className={styles['detail']}>\n\n\n                    {\n                        DETAIL?.serviceName?.includes(\"MQTT\") ?\n                            <div className={styles['left']}>\n\n                                <div className={styles['item']}>\n                                    <div>Topic/getpointvalue</div>\n                                    <div>\n                                        <Switch checkedChildren=\"启用\" unCheckedChildren=\"禁用\"\n                                                defaultChecked={DETAIL.status === 1 ? true : false}/>\n                                    </div>\n                                </div>\n                            </div> : ''\n                    }\n\n                    <div className={styles['right']}>\n                        <div className={styles['search']}>\n                            <Form\n                                layout={'inline'}\n                                form={form}\n                                onFinish={onFinish}\n                            >\n\n                                {\n                                    formData.id === 1 ?\n                                        <Form.Item label=\"IP地址\" name=\"moduleName\">\n                                            <Input placeholder=\"请输入IP地址\"/>\n                                        </Form.Item> : <>\n                                            <Form.Item label=\"客户端ID\" name=\"clientId\">\n                                                <Input placeholder=\"请输入客户端ID\"/>\n                                            </Form.Item>\n                                            <Form.Item label=\"用户名\" name=\"username\">\n                                                <Input placeholder=\"请输入用户名\"/>\n                                            </Form.Item>\n                                        </>\n                                }\n\n\n                                <Form.Item>\n                                    <Button type=\"primary\" htmlType=\"submit\">查询</Button>\n                                    <Button htmlType=\"button\" onClick={() => {\n\n                                    }} style={{marginLeft: '10px'}}>\n                                        刷新\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n\n                        </div>\n                        <div className={styles['body']}>\n\n\n                            <Table rowKey={'channelId'} dataSource={serviceList} bordered={true} pagination={false}>\n\n                                {\n\n                                    DETAIL?.serviceName?.includes(\"MQTT\") ?\n                                        columns.mqttTableColumns.map(i => {\n                                            return <Column {...i}></Column>\n                                        }) :\n                                        columns.tableColumns.map(i => {\n                                            return <Column {...i}></Column>\n                                        })\n                                }\n\n                                <Column\n                                    title=\"操作\"\n                                    align='center'\n                                    width='10%'\n                                    key=\"action\"\n                                    render={(_: any, record: any) => (\n                                        <Space size=\"middle\">\n\n                                            {\n                                                columns.operation.map(item => {\n                                                    return <a onClick={() => {\n                                                        deleteForwarding(record)\n                                                    }}>{item.name}</a>\n                                                })\n                                            }\n\n\n                                        </Space>\n                                    )}\n                                />\n\n                            </Table>\n\n\n                        </div>\n                    </div>\n\n                </div>\n            </Drawer>\n\n            {/* 编辑*/}\n            <Modal title={formTitle + '编辑'} visible={formIsModalVisible} onOk={() => {\n                addOrUpdate()\n            }} onCancel={() => {\n                setFormlIsModalVisible(false);\n            }} style={{borderRadius: '5%'}}>\n                <Form\n                    layout=\"vertical\"\n                >\n\n                    {/*<div className={styles['m-box']}>*/}\n\n\n                    {/*<div className={styles['mb-row1']}>*/}\n\n                    <Form.Item required={true} label={`端口号`}>\n                        <Input value={formData.portNumber}\n                               onChange={(val) => {\n                                   setFormData({\n                                       ...formData,\n                                       portNumber: val.target ? val.target.value : val\n                                   });\n                               }}\n                               placeholder=\"请输入端口号\"/>\n                    </Form.Item>\n                    {/*</div>*/}\n\n\n                    {\n                        formTitle.includes(\"MQTT\") ? <>\n                            <Form.Item required={true} label={`IP地址`}>\n                                <Input value={formData.ipAddress}\n                                       onChange={(val) => {\n                                           setFormData({\n                                               ...formData,\n                                               ipAddress: val.target ? val.target.value : val\n                                           });\n                                       }}\n                                       placeholder=\"请输入IP地址\"/>\n                            </Form.Item>\n                            <Form.Item required={true} label={`用户名`}>\n                                <Input value={formData.username}\n                                       onChange={(val) => {\n                                           setFormData({\n                                               ...formData,\n                                               username: val.target ? val.target.value : val\n                                           });\n                                       }}\n                                       placeholder=\"请输入用户名\"/>\n                            </Form.Item>\n                            <Form.Item required={true} label={`密码`}>\n                                <Input.Password value={formData.password}\n                                                onChange={(val) => {\n                                                    setFormData({\n                                                        ...formData,\n                                                        password: val.target ? val.target.value : val\n                                                    });\n                                                }}\n                                                placeholder=\"请输入密码\"/>\n                            </Form.Item></> : ''\n                    }\n\n\n                    {/*</div>*/}\n                </Form>\n            </Modal>\n\n\n        </div>\n    )\n        ;\n};\n\nexport default connect((\n    {\n        common, select\n    }\n) => (\n    {\n        common,\n        select\n    }\n))(MessageForwarding);\n"],"names":["ArrowsAltOutlined","ArrowsAltOutlinedSvg","props","ref","React.createElement","AntdIcon","_objectSpread","ArrowsAltOutlined$1","React.forwardRef","columns","text","React","Badge","mqtt","Column","Table","MessageForwarding","dispatch","select","form","Form","visible","setVisible","useState","DETAIL","setDETAIL","listMessageForwarding","setListMessageForwarding","formTitle","setFormTitle","formIsModalVisible","setFormlIsModalVisible","formData","setFormData","serviceList","setServiceList","useEffect","getMessageForwarding","res","list","linksForwarding","editForwarding","item","status","data","getMQTTSubscribe","WS_SERVER","wsAddWebScoket","e","getSocketState","getSocketServer","val","arrs","__spreadProps","__spreadValues","otherUrl","_data","deleteForwarding","record","clickOpenClose","_url","i","addOrUpdate","onFinish","values","getDrawerTitle","styles","index","Input","EditOutlined","Button","CaretRightOutlined","PoweroffOutlined","message","Drawer","Switch","_b","_","Space","Modal"],"mappings":"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"}
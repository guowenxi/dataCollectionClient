{"version":3,"file":"selectSingleTree.3638633b.js","sources":["../src/components/TableInfo/fieldFile/selectSingleTree.tsx"],"sourcesContent":["import React, { useState, useEffect ,useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {connect} from \"dva\";\r\n\r\nimport { Select as ASelect, Button, Modal } from 'antd';\r\nimport type { Iconf } from '../TableInfo';\r\nimport { wrapContext } from '../TableInfo';\r\nimport { ShowData } from './_css_comm';\r\nimport { Form } from 'antd';\r\nimport type { AProps } from '@/globalTyping';\r\nconst { Option } = ASelect;\r\n\r\nimport TreeBox from '../../TreeBox/TreeBox';\r\nimport MixinTable from '../../MixinTable/MixinTable';\r\n\r\nconst MSelect = styled<any>(ASelect)`\r\n  && {\r\n    width:100%;\r\n    height:100%;\r\n    .ant-select-selector{\r\n      height:100%;\r\n      padding:1vh;\r\n    }\r\n    .ant-select-selection-search-input{\r\n      height:100% !important;\r\n    }\r\n    .ant-select-selection-item{\r\n    }\r\n\r\n  }\r\n`;\r\nconst AModal = styled(Modal)`\r\n  && {\r\n    width: 70vw !important;\r\n    .select-tree-modal-box {\r\n      display: flex;\r\n      width: 100%;\r\n      margin-top: 5vh;\r\n      .tree-box-main-box {\r\n        width: 30%;\r\n        margin-right: 1vw;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst SelectedBox = styled.div`\r\nmargin:10px 0 ;\r\n    position: relative;\r\n    display: flex;\r\n    flex: auto;\r\n    flex-wrap: wrap;\r\n    max-width: 100%;\r\n`;\r\nconst SelectedBoxItem = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex: none;\r\n    box-sizing: border-box;\r\n    max-width: 100%;\r\n    height: 24px;\r\n    margin-top: 2px;\r\n    margin-bottom: 2px;\r\n    line-height: 22px;\r\n    background: #f5f5f5;\r\n    border: 1px solid #f0f0f0;\r\n    border-radius: 2px;\r\n    cursor: default;\r\n    transition: font-size .3s,line-height .3s,height .3s;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    -webkit-margin-end: 4px;\r\n    margin-inline-end: 4px;\r\n    -webkit-padding-start: 8px;\r\n    padding-inline-start: 8px;\r\n    -webkit-padding-end: 4px;\r\n    padding-inline-end: 4px;\r\n    .ant-select-selection-item-content{\r\n      display: inline-block;\r\n    margin-right: 4px;\r\n    overflow: hidden;\r\n    white-space: pre;\r\n    text-overflow: ellipsis;\r\n    }\r\n    .ant-select-selection-item-remove{\r\n      color: inherit;\r\n    font-style: normal;\r\n    line-height: 0;\r\n    text-align: center;\r\n    text-transform: none;\r\n    vertical-align: -.125em;\r\n    text-rendering: optimizeLegibility;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    display: inline-block;\r\n    color: #00000073;\r\n    font-weight: 700;\r\n    font-size: 10px;\r\n    line-height: inherit;\r\n    cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst NButton = styled(Button)`\r\n  margin: 1vh;\r\n`;\r\n\r\ninterface Ioptions {\r\n  name: string;\r\n  id: number;\r\n}\r\ninterface IconfSelect extends Iconf {\r\n  placeholder?: string;\r\n  relationType: string;\r\n  options: Ioptions[];\r\n  defaultValue: string;\r\n}\r\ninterface MProps extends AProps {\r\n  dispatch: any;\r\n  conf: IconfSelect;\r\n  name: string;\r\n  rules: any;\r\n}\r\n\r\nconst SelectTree = (props: MProps) => {\r\n  const _: any = props.conf;\r\n  const { name } = props;\r\n  const {dispatch} = props;\r\n  const theme: any = useContext(wrapContext);\r\n  const __ = _.tableSetting ? _.tableSetting : {};\r\n  const [visible, setVISIBLE] = useState(false); /* 模态层状态 */\r\n  const [OPTION, setOPTION] = useState<any>([]); /* 树形数据 */\r\n  const [selTreeListData, setSelTreeListData] = useState(_.defaultValue);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [SelectList, setSelectList] = useState([]);\r\n\r\n  const openModal = () => {\r\n    setVISIBLE(true);\r\n  };\r\n  const selTree = () => {\r\n    setVISIBLE(false);\r\n    if(__.url) theme.form.setFieldsValue({\r\n      [name]:SelectList,\r\n    }); ;\r\n  };\r\n\r\n\r\n\r\n  async function filterData(namespace: string,conf: any){\r\n    let _op = [];\r\n    if(conf.relationType){\r\n      _op = props[namespace][conf.relationType];\r\n    }else if(conf.url){\r\n      const data = await dispatch({\r\n        type: 'common/requestData',\r\n        url: conf.url,\r\n        method: 'GET',\r\n        payload: {\r\n          ...conf.params\r\n        },\r\n      })\r\n\r\n      if(conf.keyName){\r\n          data.map(function(item: any,idx: number){\r\n            item.name = item[conf.keyName];\r\n            item.id = item[conf.idName];\r\n          })\r\n      }\r\n\r\n\r\n      // const { data, error, loading } = useRequest()\r\n      _op = data;\r\n    }else{\r\n      _op = conf.options;\r\n    }\r\n    setOPTION(_op);\r\n    // filterDefaultValue(_op,_.defaultValue)\r\n  }\r\n\r\n\r\n\r\n  // 初始化加载树形选择的组件\r\n  useEffect(() => {\r\n    filterData('select', _);\r\n  }, []);\r\n\r\n    // 只在初始化时进行加载\r\n    useEffect(() => {\r\n      const _list = theme.form.getFieldValue(name);\r\n      if(_list.length)  setSelectList(_list);\r\n    }, [theme.form.getFieldValue(name)]);\r\n\r\n\r\n  /* 选中数据 */\r\n  const onCheck = async (data: any, info: any) => {\r\n    setSelTreeListData(info.checkedNodes);\r\n    if(__.url){\r\n      const _data = await dispatch({\r\n        type: 'common/requestData',\r\n        url: __.url,\r\n        method: 'GET',\r\n        payload: {\r\n          [__.paramsConfig.idName] : info.node[__.paramsConfig.keyName]\r\n        },\r\n      })\r\n      setTableData(_data.list || _data);\r\n    }else{\r\n      setTableData(info.checkedNodes[0].userList);\r\n    }\r\n  };\r\n  /* 选中数据 */\r\n  const onSelect = (data: any) => {\r\n    setSelTreeListData(data.list);\r\n    if (Array.isArray(data.data[0].userList)) {\r\n    }\r\n    setTableData(data.data);\r\n  };\r\n\r\n  /* 取消弹框 */\r\n  const cancelModal = () => {\r\n    setVISIBLE(false);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <wrapContext.Consumer>\r\n      {(_data: any): any => {\r\n        switch (_data.state) {\r\n          case 'default':\r\n            // return <ShowData>{VAL}</ShowData>;\r\n            return <ShowData></ShowData>;\r\n            break;\r\n          case 'edit':\r\n          case 'new':\r\n          case 'disabled':\r\n            return (\r\n              <Form.Item name={name} noStyle rules={props.rules}>\r\n                <div style={{'boxShadow':'0 0 0 1px #eee inside'}}>\r\n                <SelectedBox>\r\n                  {\r\n                    SelectList.map((item,idx)=>{\r\n                        return <SelectedBoxItem>\r\n                          <span className=\"ant-select-selection-item-content\">{item[_.keyName || 'name']}</span>\r\n                        </SelectedBoxItem>\r\n                    })\r\n                  }\r\n                </SelectedBox>\r\n{/*\r\n               <MSelect\r\n                 initialValue=\"null\"\r\n                 mode=\"multiple\"\r\n                showSearch\r\n                disabled=\"disabled\"\r\n                onChange={()=>{\r\n                }}\r\n                filterOption={(input: any, option: any) =>{\r\n                  return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }}\r\n                >\r\n                  {\r\n                    SelectList.map((item: any)=>{\r\n                      return  <Option title={item.name} value={item.id.toString()}>{item.name}</Option>\r\n                    })\r\n                  }\r\n                </MSelect> */}\r\n\r\n                <NButton onClick={openModal}>选择</NButton>\r\n                <AModal visible={visible} onOk={selTree} onCancel={cancelModal}>\r\n                  <div className={'select-tree-modal-box'}>\r\n                    <TreeBox\r\n                      data={OPTION}\r\n                      selectable={false}\r\n                      onCheck={onCheck}\r\n                      onSelect={onSelect}\r\n                      checkedTreeKeys={selTreeListData}\r\n                      className={'tree-box-main-box'}\r\n                    ></TreeBox>\r\n                    <MixinTable\r\n                    noSearch\r\n                      columns={__.columnList}\r\n                      data={tableData}\r\n                      handle={[\r\n                        {\r\n                          name: '添加',\r\n                          show:__.url ? true : false,\r\n                          click: (text: any, record: any, search: any) => {\r\n                            //如果列表是请求而来 则将数据切换到列表点击添加\r\n                            //因为添加只在列表带地址时存在 则直接写死\r\n                            if(__.url){\r\n                              const _sel_item = SelectList.find((item : any,idx : number)=>{\r\n                                return (item[_.idName || 'id'] == text[_.idName || 'id']);\r\n                              })\r\n                              if(_sel_item) return;\r\n                              SelectList.push(record)\r\n                              setSelectList(JSON.parse(JSON.stringify(SelectList)))\r\n                            }\r\n                          },\r\n                        },\r\n                        {\r\n                          type: 'popconfirm',\r\n                          bolName: '删除',\r\n                          show:__.url ? false : true ,\r\n                          click: (text: any, record: any, search: any) => {\r\n                            //如果列表是请求而来 则将数据切换到列表点击删除\r\n                            tableData.map((item: any, idx: number) => {\r\n                              if (item.key == text.key) {\r\n                                tableData.splice(idx, 1);\r\n                              }\r\n                            });\r\n                            setTableData(tableData);\r\n                            search.reset();\r\n                          },\r\n                          config: {\r\n                            okText: '确认',\r\n                            cancelText: '取消',\r\n                            title: '是否确认删除？',\r\n                          },\r\n                        },\r\n                      ]}\r\n                      changeKey={tableData}\r\n                    ></MixinTable>\r\n                  </div>\r\n                  {\r\n                    __.url ?\r\n                  <SelectedBox>\r\n                  {\r\n                    SelectList.map((item,idx)=>{\r\n                        return <SelectedBoxItem>\r\n                           <span className=\"ant-select-selection-item-content\">{item[_.keyName || 'name']}</span>\r\n                          <span className=\"ant-select-selection-item-remove\" onClick={()=>{\r\n                              const _idx = SelectList.findIndex((it : any,idx : number)=>{\r\n                                return (it[_.idName || 'id'] == item[_.idName || 'id']);\r\n                              })\r\n                              SelectList.splice(_idx, 1);\r\n                              setSelectList(JSON.parse(JSON.stringify(SelectList)))\r\n                          }}>x</span>\r\n                        </SelectedBoxItem>\r\n                    })\r\n                  }\r\n                </SelectedBox>\r\n              :null\r\n                  }\r\n                </AModal>\r\n                </div>\r\n              </Form.Item>\r\n            );\r\n            break;\r\n        }\r\n      }}\r\n    </wrapContext.Consumer>\r\n  );\r\n};\r\nexport default connect(({ select }: {select: any}) => ({\r\n  select,\r\n}))(SelectTree);\r\n"],"names":["styled","ASelect","AModal","Modal","SelectedBox","SelectedBoxItem","NButton","Button","SelectTree","props","_","name","dispatch","theme","useContext","wrapContext","__","visible","setVISIBLE","useState","OPTION","setOPTION","setSelTreeListData","tableData","setTableData","SelectList","setSelectList","openModal","selTree","filterData","namespace","conf","__async","_op","__spreadValues","data","item","idx","useEffect","_list","onCheck","info","_data","onSelect","cancelModal","React","ShowData","Form","TreeBox","selTreeListData","MixinTable","text","record","search","_idx","it","selectSingleTree","connect","select"],"mappings":"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"}
{"version":3,"file":"checkBox.ff68c6ee.js","sources":["../src/components/TableInfo/fieldFile/checkBox.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport {connect} from \"dva\";\r\nimport { Checkbox as ACheckbox } from 'antd';\r\nimport type { Iconf } from '../TableInfo';\r\nimport { wrapContext } from '../TableInfo';\r\nimport { ShowData } from './_css_comm';\r\n\r\nimport { Form } from 'antd';\r\n\r\nconst Minput = styled<any>(ACheckbox)`\r\n  && {\r\n    padding: 1vh;\r\n  }\r\n`;\r\n\r\ninterface IconfInput extends Iconf {\r\n  placeholder?: string;\r\n}\r\n\r\ninterface Iinput {\r\n  dispatch?: any;\r\n  conf: IconfInput;\r\n  name: string;\r\n}\r\n\r\nconst Input: React.FC<Iinput> = (props: any) => {\r\n  const _: any = props.conf;\r\n  const { name } = props;\r\n  const theme: any = useContext(wrapContext);\r\n  const [valueData, setValueData] = useState('');\r\n\r\n  useEffect(() => {\r\n    const value = theme.form.getFieldValue(name);\r\n    setValueData(value);\r\n  }, []);\r\n\r\n  return (\r\n    <wrapContext.Consumer>\r\n      {(_data: any): any => {\r\n        switch (_data.state) {\r\n          case 'default':\r\n            return <ShowData>{_.defaultValue || 'ã€€'}</ShowData>;\r\n            break;\r\n          case 'edit':\r\n          case 'new':\r\n          case 'disabled':\r\n            return (\r\n              <Form.Item name={name} rules={props.rules}>\r\n                <Minput\r\n                  style={_.style}\r\n                  disabled={_data.state === 'disabled'}\r\n                  placeholder={_.placeholder}\r\n                  size={_.size}\r\n                  value={valueData}\r\n                  checked={valueData}\r\n                  onChange={(val: any) => {\r\n                    const checkedStatus = val.target.checked;\r\n                    theme.form.setFieldsValue({\r\n                      [name]: checkedStatus,\r\n                    });\r\n                    setValueData(checkedStatus);\r\n                    if (_.relateNames) {\r\n                      _data.focus$.emit({\r\n                        relateNames: _.relateNames,\r\n                        relatekeys: _.relatekeys,\r\n                        type: _.clickType ? _.clickType : 'onChange',\r\n                        value: val,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  {_.displayName ? _.displayName : ''}\r\n                </Minput>\r\n              </Form.Item>\r\n            );\r\n            break;\r\n        }\r\n      }}\r\n    </wrapContext.Consumer>\r\n  );\r\n};\r\nexport default connect(({}) => ({}))(Input);\r\n"],"names":["Minput","styled","ACheckbox","Input","props","_","name","theme","useContext","wrapContext","valueData","setValueData","useState","useEffect","value","React","_data","ShowData","Form","checkedStatus","val"],"mappings":"2aAUA,MAAMA,EAASC,EAAYC,CAAS;AAAA;AAAA;AAAA;AAAA,EAgB9BC,EAA0BC,GAAgB,CAC9C,MAAMC,EAASD,EAAM,KACf,CACA,KAAAE,CACN,EAAAF,EAEAG,EAAgBC,qBAAAC,CAAA,EACd,CAAAC,EAAcC,CAAW,EAAAC,EAAkB,QAAA,SAAA,EAAA,EAC3CC,OAAAA,EAAAA,QAAAA,UAAA,IAAkB,CACpB,MAAKC,EAAAP,EAAA,KAAA,cAAAD,CAAA,EAELK,EACGG,CAAA,CAEG,EAAA,CAAA,CAAA,EACOC,EAAA,cAAAN,EAAA,SAAA,KAAAO,GAAA,CACH,OAAAA,EAAQ,WACR,UACG,OAAAD,EAAA,cAAAE,EAAA,KAAAZ,EAAA,cAAA,QAAA,MAEA,WAED,UAAW,WAAA,OAAyBU,EAAA,cAAAG,EAAA,KAAA,CAAA,KAAAZ,EAEhC,MAAOF,EAAE,KAAA,EACOW,EAAU,cAAAf,EAAA,CAC1B,cACA,SAAQgB,EAAA,QAAA,WACR,YAAOX,EAAA,YACP,KAASA,EAAA,KACT,MAAAK,EACQ,QAAAA,EACN,YAA0B,CAAA,MAChBS,EAAAC,EAAA,OAAA,QACVb,EAAC,KAAA,eAAA,CACD,CAAAD,GAAAa,CACA,CAAA,EACER,GAAkB,EAChBN,eAAeW,cACD,CACd,YAAoBX,EAAA,YACpB,WAAOA,EAAA,WACR,KAAAA,EAAA,UAAAA,EAAA,UAAA,WACH,MAAAe,CAAA,CACF,CAMN,CAAA,EAAAf,EAAA,YAAAA,EAAA,YAAA,EAAA,CAAA,EAMZ,CAAA"}
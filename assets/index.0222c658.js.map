{"version":3,"file":"index.0222c658.js","sources":["../src/pages/interfaceManage/index.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {connect} from \"dva\";\nimport {PaginatedParams} from \"ahooks/lib/useAntdTable/\";\nimport {useAntdTable} from \"ahooks\";\n\nimport {interfaceTest} from \"../../services/common\"\n\n\nimport {\n    Table,\n    Button,\n    Empty,\n    Modal,\n    Form,\n    Checkbox,\n    Tag,\n    Input,\n    InputNumber,\n    Tree,\n    message,\n    Select,\n    Radio,\n    Pagination\n} from \"antd\";\n\nconst {TextArea} = Input;\nconst {Search} = Input;\nconst {Option} = Select;\nconst {Column} = Table;\nimport {\n    PlusCircleOutlined,\n    DeleteOutlined,\n    EditOutlined,\n    FallOutlined,\n    RiseOutlined\n} from '@ant-design/icons';\n\nimport styles from './style.module.less';\n\nimport columns from './columns';\nimport TABLEJSON from './TABLEJSON.tsx';\nimport {listData, tableData, treeData} from './data.tsx';\nimport TableInfo from '@/components/TableInfo/TableInfo';\nimport SearchMore from \"@/components/SearchMore/SearchMore\";\nimport defaultShebei from '@/assets/default-shebei.png';\nimport kai from '@/assets/kai.png';\nimport guan from \"@/assets/guan.png\";\n\nconst InterfaceManage = (props: any) => {\n    const {dispatch, select} = props;\n    const [form] = Form.useForm();\n    const [DETAIL, setDETAIL] = useState({}); /* 表格详情 */\n    const [SELECTROWKEYS, setSELECTROWKEYS] = useState([]);  /* 选中项  */\n\n    const [formTitle, setFormTitle] = useState<string>('');//弹框标题\n    const [formIsModalVisible, setFormlIsModalVisible] = useState(false);//弹框状态，是否显示\n    const [formData, setFormData] = useState<any>({});//弹框表单信息\n\n    // 列表数据\n    const [interfaceData, setInterfaceData] = useState<any>([]);\n    const [interfaceCurrentPage, setInterfaceCurrentPage] = useState<any>({pageNo: 1});\n    const [interfaceTotalPage, setInterfaceTotalPage] = useState<number>(0);\n\n    const [listBrand, setListBrand] = useState<any>([]);\n    const [listVersion, setListVersion] = useState<any>([]);\n    const [listFunctionType, setListFunctionType] = useState<any>([]);\n    const [listFunctionOption, setListFunctionOption] = useState<any>([]);\n\n\n    useEffect(() => {\n        setInterfaceCurrentPage({pageNo: 1});\n        getListData(null);\n        findAllByType(0, 1)\n    }, [])\n\n    const getListData = (data: any, current: number = 1, pageSize: number = 10) => {\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'GET',\n            url: \"/data-acquisition/interface-info\",\n            payload: {\n                current: interfaceCurrentPage.pageNo,\n                pageSize,\n                'rbacToken': '7ed6a62261854a4eb27d844ff4df1885',\n                ...data\n            },\n            callback: (res: any) => {\n\n                if (res.success) {\n                    let list = res.data.list;\n                    let total = res.data.total;\n                    setInterfaceTotalPage(total);\n                    setInterfaceData(list);\n\n                }\n            },\n        });\n\n    }\n    const onFinish = (values: any) => {\n        console.log(values);\n        setInterfaceCurrentPage({pageNo: 1});\n        getListData(values);\n    };\n\n    /* 接口 添加  */\n    const addInterface = () => {\n        setFormData({});\n        setFormTitle(\"新增接口\");\n        setFormlIsModalVisible(true);\n    }\n    /* 接口 编辑  */\n    const editInterface = (id) => {\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'GET',\n            url: \"/data-acquisition/interface-info/\" + id,\n            payload: {},\n            callback: (res: any) => {\n                console.log(res)\n                if (res.success) {\n\n                    let data = res.data;\n                    if (data.brandCode) {\n                        findAllByType(data.brandCode, 2)\n                    }\n                    if (data.brandCode) {\n                        findAllByType(data.versionNumber, 3)\n                    }\n                    if (data.brandCode) {\n                        findAllByType(data.functionType, 4)\n                    }\n\n\n                    setFormData({\n                        ...data,\n                        \"requestMode\": data.request?.requestMode,\n                        \"requestUrl\": data.request?.requestUrl\n                    });\n                    setFormTitle(\"编辑接口\");\n                    setFormlIsModalVisible(true);\n                }\n            },\n        });\n\n    }\n\n    /* 接口删除 */\n    const deleteInterfaceInfo = (id: any) => {\n        Modal.confirm({\n            title: '删除',\n            icon: '',\n            content: '确定要删除当前接口吗',\n            onOk() {\n                dispatch({\n                    type: 'common/getRequestData',\n                    method: 'delete',\n                    url: \"/data-acquisition/interface-info/\" + id,\n                    payload: {},\n                    callback: (res: any) => {\n                        if (res.success) {\n                            setInterfaceCurrentPage({pageNo: 1});\n\n                            getListData(null);\n                        }\n                    },\n                });\n\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n    /* 接口 测试  */\n    const debugInterface = () => {\n        if (!formData.serviceIp || !formData.requestUrl || !formData.servicePort) {\n            return\n        }\n\n        try {\n            let data = formData.jsonCode;\n            let jsonCode = {}\n            if (data) {\n                jsonCode = JSON.parse(data);\n            }\n            dispatch({\n                type: 'common/getRequestData',\n                method: 'post',\n                url: 'http://' + formData.serviceIp + ':' + formData.servicePort + formData.requestUrl,\n                payload: {\n                    ...jsonCode\n                },\n                callback: (res: any) => {\n                    console.log(res)\n                    if (res.success) {\n                        setFormData({...formData, interfaceStatus: 1, debugResult: JSON.stringify(res)})\n                    }\n                },\n            });\n        } catch (e) {\n            message.error(\"请输入如正确的，请求参数(json) \")\n        }\n\n\n    }\n\n    const addOrUpdate = () => {\n        let _url = \"\"\n        let _data = {}\n        if (formData.id) {\n            _url = '/data-acquisition/interface-info/update'\n            delete formData.request\n            delete formData.requestMode\n            delete formData.requestUrl\n            _data = {...formData}\n        } else {\n            _url = '/data-acquisition/interface-info/create'\n            _data = {...formData}\n        }\n\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'post',\n            url: _url,\n            payload: {\n                ..._data,\n            },\n            callback: (res: any) => {\n                console.log(res)\n                if (res.success) {\n                    setFormlIsModalVisible(false);\n                    setInterfaceCurrentPage({pageNo: 1});\n\n                    getListData(null);\n                }\n            },\n        });\n    }\n\n    // const interfaceTest = (data: any) => {\n\n    // dispatch({\n    //     type: 'common/getRequestData',\n    //     method: data ? data.requestMode : formData.requestMode,\n    //     url: data ? data.requestUrl : formData.requestUrl,\n    //     payload: data ? data.jsonCode : formData.jsonCode,\n    //     callback: (res: any) => {\n    //         console.log(res)\n    //         if (res.success) {\n    //             setFormData({...formData, \"interfaceStatus\": 2})\n    //             message.success(res.message)\n    //         } else {\n    //             message.error(\"调试失败\")\n    //         }\n    //     },\n    // });\n    // }\n\n    const findAllByType = (parentId: number, typeLevel: number) => {\n        dispatch({\n            type: 'common/getRequestData',\n            method: 'GET',\n            url: \"/data-acquisition/interface-type-info/findAllByType\",\n            payload: {\n                parentId,\n                typeLevel\n            },\n            callback: (res: any) => {\n                if (res.success) {\n                    if (typeLevel === 1) {\n                        setListBrand(res.data)\n                    }\n                    if (typeLevel === 2) {\n                        setListVersion(res.data)\n                    }\n                    if (typeLevel === 3) {\n                        setListFunctionType(res.data)\n                    }\n                    if (typeLevel === 4) {\n                        setListFunctionOption(res.data)\n                    }\n                }\n            },\n        });\n    }\n\n\n    return (<div className={styles['interfaceManage']}>\n            <div className={styles['search']}>\n                <div className={styles['left']}>\n                    <Button onClick={() => {\n                        addInterface()\n                    }} type=\"primary\" icon={<PlusCircleOutlined/>}>新增接口</Button>\n                    <Button onClick={() => {\n                        deleteInterfaceInfo()\n                    }} type=\"primary\" icon={<DeleteOutlined/>} danger>批量删除</Button>\n                </div>\n                <div className={styles['right']}>\n                    <Form\n                        layout={'inline'}\n                        form={form}\n                        onFinish={onFinish}>\n                        <Form.Item label=\"接口名称\" name=\"interfaceName\">\n                            <Input placeholder=\"请输入接口名称\"/>\n                        </Form.Item>\n\n                        <Form.Item label=\"接口类型\" name=\"interfaceType\">\n                            <Select\n                                placeholder=\"请选择接口类型\"\n                                style={{width: \"170px\"}}>\n                                {\n                                    select?.interface_type?.map(item => {\n                                        return <Option key={item.typeCode}\n                                                       value={item.typeCode}>{item.typeName}</Option>\n                                    })\n                                }\n\n                            </Select>\n                        </Form.Item>\n                        <Form.Item label=\"状态\" name=\"interfaceStatus\">\n                            <Radio.Group value={0} defaultValue={0}>\n                                <Radio value={0}>全部</Radio>\n                                <Radio value={1}>有效</Radio>\n                                <Radio value={2}>无效</Radio>\n                            </Radio.Group>\n                        </Form.Item>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">查询</Button>\n                            <Button htmlType=\"button\" onClick={() => {\n                                form.resetFields();\n                                setInterfaceCurrentPage({pageNo: 1});\n                                getListData(null);\n                            }} style={{marginLeft: '10px'}}>\n                                重置\n                            </Button>\n                        </Form.Item>\n                    </Form>\n\n                </div>\n            </div>\n            <div className={styles['content']}>\n\n                {\n                    interfaceData.length === 0 ?\n                        <div style={{margin: \"40px auto\"}}><Empty/></div> :\n                        interfaceData.map((item, index) => {\n                            return <div key={index} className={styles['banner']}>\n                                <div className={styles['row1']}>\n                                    <div>\n                                        <img src={defaultShebei}/>\n                                    </div>\n                                    <div>{item.name}\n\n                                    </div>\n                                    <div><Checkbox onChange={() => {\n                                    }}/></div>\n                                </div>\n                                <div className={styles['row2']}>\n                                    <div>状态</div>\n                                    <div>接口类型</div>\n                                </div>\n                                <div className={styles['row3']}>\n                                    <div>\n                                        <Tag\n                                            color={item.interfaceStatus === 1 ? 'success' : 'error'}>{item.interfaceStatus === 1 ? '有效' : '无效'}</Tag>\n                                    </div>\n                                    <div>{item?.interfaceType?.typeName}</div>\n                                </div>\n                                <div className={styles['row4']}>\n                                    <div onClick={() => {\n                                        editInterface(item.id)\n                                    }}>编辑\n                                    </div>\n                                    <div onClick={() => {\n                                        deleteInterfaceInfo(item.id)\n                                    }}>删除\n                                    </div>\n                                </div>\n                            </div>\n                        })\n                }\n            </div>\n\n            <div className={styles['footer']}>\n                {\n                    interfaceData.length === 0 ? '' :\n                        <Pagination pageSize={10} total={interfaceTotalPage}\n                                    onChange={(page: number, pageSize: number) => {\n                                        interfaceCurrentPage.pageNo = page\n                                        setInterfaceCurrentPage({pageNo: page});\n                                        getListData(null)\n                                    }}/>\n                }\n            </div>\n\n            {/* 接口添加、修改*/}\n            <Modal title={formTitle} visible={formIsModalVisible} onCancel={() => {\n                setFormlIsModalVisible(false);\n            }}\n\n                   footer={[\n                       <Button key=\"back\" onClick={() => {\n                           setFormlIsModalVisible(false);\n                       }}>\n                           取消\n                       </Button>,\n                       <Button onClick={() => {\n                           debugInterface();\n                       }} type=\"primary\" ghost>\n                           测试\n                       </Button>,\n                       <Button onClick={() => {\n                           addOrUpdate();\n                       }} type=\"primary\">确定</Button>,\n                   ]}\n\n                   width={600}>\n                <Form layout=\"vertical\">\n\n                    {\n                        formTitle === \"新增接口\" || formTitle === \"编辑接口\" ? <div className={styles['m-box']}>\n                            <div className={styles['mb-row2']}>\n                                <div className={styles['mbr-left']}>\n                                    <Form.Item required={true} label={`接口名称`}>\n                                        <Input value={formData.name}\n                                               onChange={(val) => {\n                                                   setFormData({\n                                                       ...formData,\n                                                       name: val.target ? val.target.value : val\n                                                   });\n                                               }}\n                                               placeholder=\"请输入接口名称\"/>\n                                    </Form.Item>\n                                </div>\n                                <div className={styles['mbr-right']}>\n                                    <Form.Item required={true} label={`接口类型`}>\n\n                                        <Select\n                                            value={formData.interfaceType}\n                                            onChange={(val: any, option: any) => {\n                                                setFormData({\n                                                    ...formData,\n                                                    interfaceType: val.target ? val.target.value : val,\n                                                    interfaceTypeName: option.children,\n                                                    debugResult: \"\"\n                                                });\n                                            }}\n                                            style={{width: '100%'}}\n                                            placeholder=\"请选择接口类型\"\n                                        >\n\n                                            {\n                                                select?.interface_type?.map((item) => {\n                                                    return <Option key={item.typeCode}\n                                                                   value={item.typeCode}>{item.typeName}</Option>\n                                                })\n                                            }\n                                        </Select>\n\n                                    </Form.Item>\n\n                                </div>\n                            </div>\n\n                            {\n                                formData.interfaceType === 2 ? <>\n                                    <div className={styles['mb-row1']}>\n                                        <Form.Item required={true} label={`请求`}>\n                                            <Input addonBefore={\n                                                <Select defaultValue=\"1\" className=\"select-before\">\n                                                    <Option value=\"1\">GET</Option>\n                                                    <Option value=\"2\">POST</Option>\n                                                </Select>}/>\n\n                                        </Form.Item>\n                                        <Form.Item required={true} label={`轮询(ms)`}>\n                                            <InputNumber min={1} max={10} onChange={(e) => {\n                                            }} style={{width: \"100%\"}}/>\n                                        </Form.Item>\n                                    </div>\n                                </> : <>\n                                    <div className={styles['mb-row2']}>\n                                        <div className={styles['mbr-left']}>\n                                            <Form.Item required={true} label={`IP地址`}>\n                                                <Input value={formData.serviceIp}\n                                                       onChange={(val) => {\n                                                           setFormData({\n                                                               ...formData,\n                                                               serviceIp: val.target ? val.target.value : val\n                                                           });\n                                                       }}\n                                                       placeholder=\"请输入IP地址\"/>\n                                            </Form.Item>\n                                        </div>\n                                        <div className={styles['mbr-right']}>\n                                            <Form.Item required={true} label={`端口号`}>\n                                                <Input value={formData.servicePort}\n                                                       onChange={(val) => {\n                                                           setFormData({\n                                                               ...formData,\n                                                               servicePort: val.target ? val.target.value : val\n                                                           });\n                                                       }}\n                                                       placeholder=\"请输入端口号\"/>\n                                            </Form.Item>\n                                        </div>\n                                    </div>\n\n                                    <div className={styles['mb-row2']}>\n                                        <div className={styles['mbr-left']}>\n                                            <Form.Item required={true} label={`品牌`}>\n\n                                                <Select\n                                                    value={formData.brandCode}\n                                                    onChange={(val: any, option: any) => {\n                                                        findAllByType(val, 2)\n                                                        setFormData({\n                                                            ...formData,\n                                                            brandCode: val.target ? val.target.value : val,\n                                                            brandName: option.children,\n                                                            versionNumber: null,\n                                                            versionNumberName: null,\n                                                            functionType: null,\n                                                            functionTypeName: null,\n                                                            functionOption: null,\n                                                            functionOptionName: null,\n                                                        });\n                                                    }}\n                                                    style={{width: '100%'}}\n                                                    placeholder=\"请选择品牌\"\n                                                >\n\n                                                    {\n                                                        listBrand?.map((item) => {\n                                                            return <Option key={item.id}\n                                                                           value={item.id}>{item.typeName}</Option>\n                                                        })\n                                                    }\n                                                </Select>\n\n                                            </Form.Item>\n\n                                        </div>\n                                        <div className={styles['mbr-right']}>\n                                            <Form.Item required={true} label={`版本号`}>\n                                                <Select\n                                                    value={formData.versionNumber}\n                                                    onChange={(val: any, option: any) => {\n\n                                                        findAllByType(val, 3)\n\n                                                        setFormData({\n                                                            ...formData,\n                                                            versionNumber: val.target ? val.target.value : val,\n                                                            versionNumberName: option.children,\n                                                            functionType: null,\n                                                            functionTypeName: null,\n                                                            functionOption: null,\n                                                            functionOptionName: null,\n                                                        });\n                                                    }}\n                                                    style={{width: '100%'}}\n                                                    placeholder=\"请选择版本号\"\n                                                >\n\n                                                    {\n                                                        listVersion?.map((item) => {\n                                                            return <Option key={item.id}\n                                                                           value={item.id}>{item.typeName}</Option>\n                                                        })\n                                                    }\n                                                </Select>\n                                            </Form.Item>\n\n                                        </div>\n                                    </div>\n\n                                    <div className={styles['mb-row2']}>\n                                        <div className={styles['mbr-left']}>\n                                            <Form.Item required={true} label={`功能类别`}>\n\n                                                <Select\n                                                    value={formData.functionType}\n                                                    onChange={(val: any, option: any) => {\n\n                                                        findAllByType(val, 4)\n\n                                                        setFormData({\n                                                            ...formData,\n                                                            functionType: val.target ? val.target.value : val,\n                                                            functionTypeName: option.children,\n                                                            functionOption: null,\n                                                            functionOptionName: null,\n                                                        });\n                                                    }}\n                                                    style={{width: '100%'}}\n                                                    placeholder=\"请选择功能类别\"\n                                                >\n                                                    {\n                                                        listFunctionType?.map((item) => {\n                                                            return <Option key={item.id}\n                                                                           value={item.id}>{item.typeName}</Option>\n                                                        })\n                                                    }\n                                                </Select>\n\n                                            </Form.Item>\n                                        </div>\n                                        <div className={styles['mbr-right']}>\n                                            <Form.Item required={true} label={`功能选项`}>\n                                                <Select\n                                                    value={formData.functionOption}\n                                                    onChange={(val: any, option: any) => {\n                                                        console.log(option)\n                                                        setFormData({\n                                                            ...formData,\n                                                            functionOption: val.target ? val.target.value : val,\n                                                            functionOptionName: option.children,\n                                                            requestMode: 'POST',\n                                                            requestUrl: option.requestUrl\n                                                        });\n                                                    }}\n                                                    style={{width: '100%'}}\n                                                    placeholder=\"请选择功能选项\"\n                                                >\n\n                                                    {\n                                                        listFunctionOption?.map((item) => {\n                                                            return <Option key={item.id} requestUrl={item.requestUrl}\n                                                                           value={item.id}>{item.typeName}</Option>\n                                                        })\n                                                    }\n                                                </Select>\n                                            </Form.Item>\n                                        </div>\n                                    </div>\n                                </>\n                            }\n\n\n                            <div className={styles['mb-row1']}>\n                                <Form.Item required={true} label={`请求参数(json)`}>\n                                    <TextArea value={formData.jsonCode}\n                                              onChange={(val) => {\n                                                  setFormData({\n                                                      ...formData,\n                                                      jsonCode: val.target ? val.target.value : val\n                                                  });\n                                              }}\n                                              placeholder={`例如: { \"name\": \"张三三\", \"age\": 18 }`} rows={4}/>\n                                </Form.Item>\n                            </div>\n\n                            {formData.debugResult ? <div className={styles['mb-row1']}>\n                                <Form.Item required={true} label={`请求结果`}>\n                                    <TextArea value={formData.debugResult} disabled={true}\n                                              onChange={(val) => {\n                                                  setFormData({\n                                                      ...formData,\n                                                      debugResult: val.target ? val.target.value : val\n                                                  });\n                                              }}\n                                              readOnly={true} rows={4}/>\n                                </Form.Item>\n                            </div> : null}\n\n\n                        </div> : ''\n                    }\n\n\n                    {\n                        formTitle === \"调试接口\" ? <div className={styles['m-box']}>\n\n                            <div className={styles['mb-row1']}>\n                                <Form.Item required={true} label={`请求参数(json)`}>\n                                    <TextArea value={formData.jsonCode}\n                                              onChange={(val) => {\n                                                  setFormData({\n                                                      ...formData,\n                                                      jsonCode: val.target ? val.target.value : val\n                                                  });\n                                              }}\n                                              placeholder={`例如: { \"name\": \"张三三\", \"age\": 18 }`} rows={4}/>\n                                </Form.Item>\n                            </div>\n                            <div className={styles['mb-row1']}>\n                                <Form.Item required={true} label={`请求结果`}>\n                                    <TextArea value={formData.debugResult}\n                                              onChange={(val) => {\n                                                  setFormData({\n                                                      ...formData,\n                                                      debugResult: val.target ? val.target.value : val\n                                                  });\n                                              }}\n                                              readOnly={true} rows={4}/>\n                                </Form.Item>\n                            </div>\n\n                        </div> : ''\n                    }\n                </Form>\n            </Modal>\n        </div>\n    );\n};\n\nexport default connect(({common, select}) => ({\n    common,\n    select\n}))(InterfaceManage);\n"],"names":["TextArea","Input","Option","Select","InterfaceManage","props","dispatch","select","form","Form","useState","formTitle","setFormTitle","formIsModalVisible","setFormlIsModalVisible","formData","setFormData","interfaceData","setInterfaceData","interfaceCurrentPage","setInterfaceCurrentPage","interfaceTotalPage","setInterfaceTotalPage","listBrand","setListBrand","listVersion","setListVersion","listFunctionType","listFunctionOption","setListFunctionOption","useEffect","getListData","findAllByType","data","current","pageSize","__spreadValues","res","list","total","onFinish","values","addInterface","editInterface","id","__spreadProps","_a","_b","deleteInterfaceInfo","Modal","debugInterface","jsonCode","message","addOrUpdate","_url","_data","parentId","typeLevel","React","styles","Button","PlusCircleOutlined","DeleteOutlined","item","Radio","Empty","index","defaultShebei","Checkbox","Tag","Pagination","page","val","option","InputNumber","e"],"mappings":"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"}
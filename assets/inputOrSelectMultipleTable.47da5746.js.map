{"version":3,"file":"inputOrSelectMultipleTable.47da5746.js","sources":["../src/components/TableInfo/fieldFile/inputOrSelectMultipleTable.tsx"],"sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\nimport styled from 'styled-components';\n\nimport {connect} from \"dva\";\n\nimport {Input, Button, Modal, Tag, Input as AInput} from 'antd';\nimport type {Iconf} from '../TableInfo';\nimport {wrapContext} from '../TableInfo';\nimport {ShowData} from './_css_comm';\nimport {Form} from 'antd';\nimport MixinTable from '../../MixinTable/MixinTable';\n\nimport {useList} from 'react-use';\n\nconst SelectTableBox = styled.div`\n  border: 1px solid #ccc;\n  display: flex;\n  align-items: center;\n  height: 100%;\n  .ant-form-item {\n    width: 100%!important;\n  }\n  .select-main-box {\n    display: flex;\n    flex-flow: row wrap;\n\n    .select-item-box {\n      margin: 1vh;\n    }\n  }\n`;\n\nconst NButton = styled(Button)`\n  margin: 0 1vh;\n`;\nconst Minput = styled(AInput)`\n  && {\n    height: 100%;\n    width: 100%;\n    padding: 1vh;\n\n\n  }\n`;\nconst AModal = styled(Modal)`\n  && {\n    width: 70vw !important;\n\n    .ant-form {\n      margin-top: 2vh;\n    }\n\n    .select-tree-modal-box {\n      width: 100%;\n      display: flex;\n\n      .tree-box-main-box {\n        width: 30%;\n        margin-right: 1vw;\n      }\n    }\n  }\n`;\n\ninterface Ioptions {\n  name: string;\n  id: number;\n}\n\ninterface IconfSelect extends Iconf {\n  placeholder?: string;\n  relationType: string;\n  options: Ioptions[];\n  defaultValue: string;\n}\n\ninterface ISelect {\n  dispatch?: any;\n  conf: IconfSelect;\n  name: string;\n  rules: any;\n}\n\nconst Select: React.FC<ISelect> = (props) => {\n  const _: any = props.conf;\n\n  const {name} = props;\n\n  const __ = _.tableSetting ? _.tableSetting : {};\n  const theme: any = useContext(wrapContext);\n  const [OPTION, {set}] = useList([]);\n  const [VAL, setVAL] = useState();\n  const [VISIBLE, setVISIBLE] = useState(false);\n  const [SELECTROWKEYS, setSELECTROWKEYS] = useState([]);\n\n  function filterData() {\n    let _op = [];\n    const data = theme.form.getFieldValue();\n    console.log(data)\n    set({name: data.name});\n\n    theme.form.setFieldsValue({\n      [name]: data.name,\n    });\n\n    console.log(OPTION)\n\n  }\n\n  // 只在初始化时进行加载\n  useEffect(() => {\n\n    // filterData();\n  }, []);\n\n  /* 删除 */\n  // const deleteTableData=(item:any,index:any)=>{\n  //   OPTION.splice(index,1);\n  //   VAL.splice(index,1);\n  //   set(OPTION);\n  //   setVAL(VAL);\n  // }\n\n  return (\n    <wrapContext.Consumer>\n      {(_data) => {\n        switch (_data.state) {\n          case 'default':\n            return <ShowData>{VAL}</ShowData>;\n            break;\n          case 'edit':\n          case 'new':\n          case 'disabled':\n            return (\n              <div>\n                <SelectTableBox>\n                  <div className=\"select-main-box\" style={_.style}>\n\n                    {OPTION.length > 0\n                      ? OPTION.map((item: any) => {\n                        return (\n                          <Form.Item name='name' rules={props.rules}>\n                            <Minput placeholder={_.placeholder}  value={item.name} disabled={_data.state === 'disabled'}\n                                    onChange={(val) => {\n                                      set({...item, name: val.target.value})\n                                      theme.form.setFieldsValue({\n                                        [name]: val.target.value,\n                                      });\n                                    }}/>\n                          </Form.Item>\n                        );\n                      })\n                      : <Form.Item name='name' rules={props.rules}>\n                        <Minput placeholder={_.placeholder} disabled={_data.state === 'disabled'}\n                                onChange={(val) => {\n                                  theme.form.setFieldsValue({\n                                    [name]: val.target.value,\n                                  });\n                                }}/>\n                      </Form.Item>}\n                  </div>\n\n                  {_data.state === 'disabled' ? null : (\n                    <NButton type=\"primary\" onClick={() => setVISIBLE(true)}>\n                      {_.btnText}\n                    </NButton>\n                  )}\n                </SelectTableBox>\n\n                <AModal\n                  title={_.modalTitle}\n                  visible={VISIBLE}\n                  onOk={() => {\n                    const ids: any = [];\n                    const value: any = [];\n\n                    const data: any = SELECTROWKEYS.map((item: any) => {\n                      ids.push(__.idKey ? item[__.idKey] : item.id);\n                      value.push(item.phone);\n                      return {\n                        ...item,\n                        name: __.nameKey ? item[__.nameKey] : item.name,\n                        id: __.idKey ? item[__.idKey] : item.id,\n                      };\n                    });\n\n                    /// ///////\n                    theme.form.setFieldsValue({\n                      [name]: data[0].name,\n                    });\n                    /// /////\n                    set(data);\n                    setVAL(ids);\n                    setVISIBLE(false);\n\n\n                    _data.focus$.emit({\n                      relateNames: _.relateNames,\n                      relatekeys: _.relatekeys,\n                      // type: _.clickType ? _.clickType : \"onChange\",\n                      value: value\n                    })\n\n\n                  }}\n                  onCancel={() => setVISIBLE(false)}\n                >\n                  <MixinTable\n                    url={__.url}\n                    changeKey={VISIBLE}\n                    params={__.params}\n                    columns={__.columnsList}\n                    rowSelection={(res: any, data: any) => {\n                      res.map((item01: any, index01: number) => {\n                        Array.isArray(OPTION) && OPTION.map((item02: any) => {\n                          if (item01 === item02.id) {\n                            data[index01] = item02;\n                          }\n                        });\n                      });\n                      setSELECTROWKEYS(data);\n                      // setOPTION(data);\n                      // setVAL(data)\n                    }}\n                    rowKey=\"item\"\n                    defaultValue={VAL}\n                    checkboxType={__.checkboxType}\n                  ></MixinTable>\n                </AModal>\n              </div>\n            );\n            break;\n        }\n      }}\n    </wrapContext.Consumer>\n  );\n};\nexport default connect(({select}: { select: any }) => ({\n  select,\n}))(Select);\n"],"names":["SelectTableBox","styled","NButton","Button","Minput","AInput","AModal","Modal","Select","props","_","name","__","theme","useContext","wrapContext","OPTION","set","useList","setVAL","useState","VISIBLE","setVISIBLE","SELECTROWKEYS","setSELECTROWKEYS","useEffect","React","_data","ShowData","VAL","item","Form","val","__spreadProps","__spreadValues","value","data","ids","MixinTable","res","item01","index01","item02"],"mappings":"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"}
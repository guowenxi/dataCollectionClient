{"version":3,"file":"selectTbaleWithSelectMap.05a48e47.js","sources":["../src/components/TableInfo/fieldFile/selectTbaleWithSelectMap.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Modal, Button, Input as AInput, Tag } from 'antd';\r\nimport type { Iconf} from '../TableInfo';\r\nimport { wrapContext } from '../TableInfo';\r\nimport { Form } from 'antd';\r\nimport { ShowData } from './_css_comm';\r\nimport { PlusCircleOutlined, MinusCircleOutlined } from '@ant-design/icons';\r\nimport { Map } from 'react-amap';\r\nimport MixinTable from '../../MixinTable/MixinTable';\r\nimport { EnvironmentFilled } from '@ant-design/icons';\r\nimport type { AProps } from '@/globalTyping';\r\nimport { useDynamicList } from 'ahooks';\r\nimport { G } from '@/global';\r\n\r\nconst { amapkey, mapCenter } = G;\r\nconst AModal = styled(Modal)`\r\n  && {\r\n    width: 70vw !important;\r\n    .ant-modal {\r\n    }\r\n  }\r\n`;\r\n\r\nconst WrapMap = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 60vh;\r\n`;\r\nconst MainMap = styled<any>(Map)`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst MapIcon = styled(EnvironmentFilled)`\r\n  color: #ccc;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  right: 10px;\r\n  font-size: 20px;\r\n  top: 10px;\r\n`;\r\n\r\nconst SelectTableBox = styled.div`\r\n  /* border: 1px solid #ccc; */\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  .select-main-box {\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    .select-item-box {\r\n      margin: 1vh;\r\n    }\r\n  }\r\n`;\r\nconst NButton = styled(Button)`\r\n  margin: 1vh;\r\n`;\r\n\r\ninterface IconfInputNumber extends Iconf {\r\n  min?: number;\r\n  max?: number;\r\n  defaultValue?: number;\r\n  decimalSeparator?: string;\r\n  tableSetting: {\r\n    columnsList: any[];\r\n    params: Record<string, string>;\r\n  };\r\n}\r\n\r\ninterface MProps extends AProps {\r\n  rules: any;\r\n  dispatch?: any;\r\n  conf: IconfInputNumber;\r\n  name: string;\r\n}\r\n\r\nconst RowMainBox = styled.div`\r\n  padding: 2vh 2vh !important;\r\n  border-right: 1px solid #ccc;\r\n  border-bottom: 1px solid #ccc;\r\n  margin: 0 auto !important;\r\n  display: flex;\r\n  align-items: center;\r\n  .left-side-box {\r\n    width: 90%;\r\n  }\r\n  .right-side-box {\r\n    flex: 1;\r\n  }\r\n  .row-select-item-box {\r\n    .ant-form-item-control-input-content {\r\n      border-bottom: 1px solid #ccc;\r\n      border-right: 1px solid #ccc;\r\n    }\r\n  }\r\n`;\r\n\r\nconst RowBox = styled(Form.Item)`\r\n  display: flex;\r\n  .ant-form-item-control-input-content {\r\n    display: flex;\r\n  }\r\n  .row-item {\r\n    flex: 1;\r\n  }\r\n  .ant-form-item-label {\r\n    width: 7vw;\r\n    background: #ebebeb;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-bottom: 1px solid #ccc;\r\n  }\r\n  .row-select-item {\r\n  }\r\n  .ant-input {\r\n    padding: 1vh;\r\n  }\r\n  .row-select-item {\r\n    .ant-form-item-control-input-content{\r\n      border:none;\r\n    }\r\n  }\r\n`;\r\n\r\nlet map: any = {};\r\nlet polyEditor: any;\r\n// var PolygonEditor: any;\r\n// var polygonData = '';\r\nlet selItemIndx = 0;\r\nlet ts_polygon: any[] = [];\r\n/*\r\n**此组件使用amap2.0部分功能 故使用不了react-amap 1.0版本\r\n使用初始化方法进行加载\r\n*/\r\ninterface AInputArr{\r\n  option: any;\r\n  wgName: string;\r\n  points: any;\r\n  unit: any;\r\n}\r\nconst InputNumber = (props: MProps) => {\r\n\r\n  const [ list, remove, push ,resetList] = useDynamicList([{ option: [], wgName: '片区1', points: [] ,unit:[]}]);\r\n  const theme = useContext(wrapContext);\r\n  const [OPTION, setOPTION] = useState([]);\r\n  const [VISIBLE, setVISIBLE] = useState(false);\r\n  // const [polyginList, setPolyginList] = useState([]); /* 保存的数据 */\r\n  const [SENTER] = useState(mapCenter);\r\n  const [, setgeocoder] = useState({});\r\n  const [tableVISIBLE, setTableVISIBLE] = useState(false); /* 表格弹框 */\r\n  const [VAL, setVAL] = useState();\r\n  const [SELECTROWKEYS, setSELECTROWKEYS] = useState<[]>([]);\r\n  const [mapPolygonEditState, setMapPolygonEditState] = useState('edit'); /* 线路编辑状态 */\r\n  const [savePolygonData, setSavePolygonData] = useState<any>([]); /* 保存的当前地点数据 */\r\n  const [optionIndex, setOptionIndex] = useState<number>(0); /* 选中索引值 */\r\n\r\n  const _ = props.conf;\r\n  const {name} = props;\r\n  let __: any;\r\n  if(_.tableSetting) __ =_.tableSetting ;\r\n  useEffect(() => {\r\n    const _list: any = theme.form.getFieldValue([name]) || list;\r\n    resetList(_list);\r\n  }, []);\r\n\r\n\r\n\r\n  /* 确定地址选择 */\r\n  const mapEvents = (status: any)=>{\r\n    return {\r\n      created: (ins: {}) => {\r\n        // setmap(ins)\r\n        map = ins;\r\n\r\n        AMap.plugin('AMap.Geocoder', () => {\r\n          setgeocoder(\r\n            new AMap.Geocoder({\r\n              city: '010', // 城市，默认：“全国”\r\n            }),\r\n          );\r\n        });\r\n        AMap.plugin('AMap.PolygonEditor', () => {\r\n          let polygon;\r\n          polyEditor = new AMap.PolygonEditor(map);\r\n          polyEditor.on('add', function (data: { target: any; }) {\r\n            console.log(data);\r\n            polygon = data.target;\r\n            polyEditor.addAdsorbPolygons(polygon);\r\n            //  polygon.on('dblclick', (data) => {\r\n            //   setMapPolygonEditState('edit')\r\n            //   polyEditor.setTarget(data.target);\r\n            //   polyEditor.open();\r\n            // })\r\n            // 暂存数据 在弹框点击确定的时候进行保存\r\n            ts_polygon[selItemIndx] = polygon;\r\n          });\r\n          // 只在初始化的时候加载\r\n          // polyEditor.setTarget();\r\n          // polyEditor.open();\r\n\r\n\r\n          const pointsList = list;\r\n          const _list: any[] | ((prevState: never[]) => never[]) = [];\r\n          if (Array.isArray(pointsList)) {\r\n            pointsList.map((item01: any) => {\r\n              const positiveList: any=[];\r\n              if(Array.isArray(item01.points)&&item01.points.length){\r\n                item01.points.map((item02: any)=>{\r\n                  positiveList.push([Number(item02.x), Number(item02.y)]);\r\n                })\r\n                list.push(new AMap.Polygon({\r\n                  path: positiveList,\r\n                }))\r\n              }\r\n            });\r\n          }\r\n          map.clearMap();\r\n          if(_list.length){\r\n            map.add(_list);\r\n          }\r\n          setSavePolygonData(_list);\r\n          ts_polygon=_list;\r\n          if (status != 'disabled') {\r\n            if (status === 'edit') {\r\n              polyEditor.setTarget(_list[selItemIndx]);\r\n            } else {\r\n              polyEditor.setTarget();\r\n            }\r\n            polyEditor.open();\r\n          } \r\n        });\r\n        \r\n\r\n  \r\n         \r\n\r\n      },\r\n      click: () => {},\r\n     \r\n    }\r\n  };\r\n\r\n  const selAddress = async (index: number) => {\r\n    // const data = theme.form.getFieldsValue();\r\n    \r\n    \r\n    selItemIndx = index;\r\n    // if (savePolygonData) {\r\n    //   ts_polygon[selItemIndx] = savePolygonData[selItemIndx];\r\n    // }\r\n   \r\n\r\n    setVISIBLE(true);\r\n    setMapPolygonEditState('edit');\r\n    savePolygonData &&\r\n      savePolygonData.map(function (item: any) {\r\n        map.add(item);\r\n      });\r\n    if (polyEditor) {\r\n      if (polyEditor && savePolygonData.length > selItemIndx) {\r\n        // 如已有对象则编辑对象\r\n        polyEditor.setTarget(savePolygonData[selItemIndx]);\r\n      } else {\r\n        // 在新设置多边形时先要将之前的编辑对象清空\r\n        polyEditor.setTarget();\r\n      }\r\n      polyEditor.open();\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    // polyEditor.close();\r\n    // 保存数据\r\n    const _savePolygonData = savePolygonData;\r\n    _savePolygonData[selItemIndx] = ts_polygon[selItemIndx];\r\n    if (_savePolygonData[selItemIndx]) {\r\n      const path = _savePolygonData[selItemIndx].getPath();\r\n      const polygonList: { x: any; y: any; }[] = [];\r\n      if (Array.isArray(path)) {\r\n        path.map((item01: any) => {\r\n          polygonList.push({\r\n            x: item01.lng,\r\n            y: item01.lat,\r\n          });\r\n        });\r\n      }\r\n      // let _polyginList = polyginList;\r\n      // _polyginList[selItemIndx] = polygonList;\r\n      // setPolyginList(_polyginList);\r\n      list[optionIndex].points = polygonList;\r\n      theme.form.setFieldsValue({ [name]: list });\r\n    }\r\n    polyEditor.close();\r\n    setTimeout(()=>{\r\n      setSavePolygonData(_savePolygonData);\r\n      map.clearMap();\r\n      setVISIBLE(false);\r\n      setTableVISIBLE(false);\r\n    },500)\r\n\r\n     \r\n    // theme.form.setFieldsValue({\r\n    //   [name]:ADDRESS,\r\n    // });\r\n    // 如果没有lnglat 则创建这个字段\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    polyEditor.removeAdsorbPolygons(savePolygonData[selItemIndx]);\r\n    map.clearMap();\r\n    setVISIBLE(false);\r\n    setTableVISIBLE(false);\r\n  };\r\n\r\n  /* 网格编辑 */\r\n  const editPolygon = () => {\r\n    if (!polyEditor) {\r\n      return;\r\n    }\r\n    switch (mapPolygonEditState) {\r\n      case 'edit':\r\n        polyEditor.close();\r\n        break;\r\n      case 'disabled':\r\n        polyEditor.open();\r\n        break;\r\n    }\r\n    setMapPolygonEditState(mapPolygonEditState == 'edit' ? 'disabled' : 'edit');\r\n  };\r\n\r\n  /* 删除当前区域编辑的多边形 */\r\n  const delPolygon = () => {\r\n    ts_polygon[selItemIndx] = '';\r\n    polyEditor.removeAdsorbPolygons(savePolygonData[selItemIndx]);\r\n    map.clearMap();\r\n    polyEditor.setTarget();\r\n    polyEditor.open();\r\n  };\r\n\r\n  return (\r\n    <wrapContext.Consumer>\r\n      {(_data) => {\r\n        switch (_data.state) {\r\n          case 'default':\r\n            return <ShowData>{_.defaultValue || '　'}</ShowData>;\r\n            break;\r\n          case 'edit':\r\n          case 'new':\r\n          case 'disabled':\r\n            return (\r\n              <Form.Item\r\n                name={name}\r\n                rules={[\r\n                  () => ({\r\n                    validator(value: any, callback: any) {\r\n                      if (props.rules[0].required) {\r\n                        for (let i = 0; i < value.length; i++) {\r\n                          if (\r\n                            value[i].wgName == '' ||\r\n                            !value[i].points.length ||\r\n                            !value[i].option.length\r\n                          ) {\r\n                            return Promise.reject(props.rules[0].message);\r\n                          }\r\n                        }\r\n                        if (!value.length) {\r\n                          return Promise.reject(props.rules[0].message);\r\n                        }\r\n                      }\r\n                      callback();\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                {list.map((item: any, index: number) => (\r\n                  <RowMainBox>\r\n                    <div className=\"left-side-box\">\r\n                      <RowBox>\r\n                        <Form.Item\r\n                          rules={[{ required: true, message: '请输入分区名' }]}\r\n                          className=\"row-item\"\r\n                          label={`分区${index + 1}名称`}\r\n                          // key={item.wgName}\r\n                        >\r\n                          <AInput\r\n                            style={_.style}\r\n                            disabled={_data.state === 'disabled'}\r\n                            placeholder={`请输入${index + 1}名称`}\r\n                            size={_.size}\r\n                            value={item.wgName}\r\n                            onChange={(value: any) => {\r\n                              item.wgName = value.target ? value.target.value : value.target;\r\n                              resetList(list)\r\n                              theme.form.setFieldsValue({ [name]: list });\r\n                            }}\r\n                          />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          rules={[{ required: true, message: '请选择区域' }]}\r\n                          className=\"row-map-item\"\r\n                          key={String(item.points)}\r\n                        >\r\n                          <MapIcon\r\n                            onClick={() => {\r\n                              selAddress(index);\r\n                              setOptionIndex(index);\r\n                            }}\r\n                            style={{\r\n                              position: 'absolute',\r\n                              color: ' #ccc',\r\n                              cursor: 'pointer',\r\n                              right: '10px',\r\n                              fontSize: '20px',\r\n                              top: '10px',\r\n                            }}\r\n                          />\r\n                        </Form.Item>\r\n                      </RowBox>\r\n\r\n                      <RowBox className=\"row-select-item-box\">\r\n                        <Form.Item\r\n                          rules={[{ required: true, message: '请选择分区保洁人员' }]}\r\n                          className=\"row-select-item\"\r\n                          label={`分区${index + 1}保洁人员`}\r\n                          key={String(item.unit)}\r\n                        >\r\n                          <SelectTableBox>\r\n                            <div className=\"select-main-box\">\r\n                              {Array.isArray(item.option)\r\n                                ? item.option.map((item: { name: React.ReactNode; }) => {\r\n                                    return (\r\n                                      <Tag\r\n                                        className=\"select-item-box\"\r\n                                        // closable\r\n                                        // onClose={e => {\r\n                                        //   e.preventDefault();\r\n                                        //   deleteTableData(item,idx)\r\n                                        // }}\r\n                                      >\r\n                                        {item.name}\r\n                                      </Tag>\r\n                                    );\r\n                                  })\r\n                                : ''}\r\n                            </div>\r\n                          </SelectTableBox>\r\n                        </Form.Item>\r\n                        <NButton\r\n                          type=\"primary\"\r\n                          onClick={() => {\r\n                            setTableVISIBLE(true);\r\n                            setOPTION(item.option);\r\n                            setOptionIndex(index);\r\n                            setVAL(item.unit);\r\n                          }}\r\n                        >\r\n                          选择\r\n                        </NButton>\r\n                      </RowBox>\r\n                    </div>\r\n\r\n                    <Form.Item className=\"right-side-box\">\r\n                      {_data.state === 'disabled' ? null : (\r\n                        <div\r\n                          style={{\r\n                            padding: '0 1vw',\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                          }}\r\n                          className=\"contentItem_twoInput\"\r\n                        >\r\n                          {list.length == index + 1 ? (\r\n                            <PlusCircleOutlined\r\n                              onClick={() => {\r\n                                push({\r\n                                  option: [],\r\n                                  wgName: `片区${list.length + 1}`,\r\n                                  points: [],\r\n                                })\r\n                                theme.form.setFieldsValue({\r\n                                  [name]:list\r\n                                });\r\n                              }}\r\n                              style={{ fontSize: '30px', color: '#08c', cursor: 'pointer' }}\r\n                            />\r\n                          ) : (\r\n                            <MinusCircleOutlined\r\n                              onClick={() => {\r\n                                remove(index)\r\n                                const _savePolygonData = savePolygonData;\r\n                                _savePolygonData.splice(index, 1);\r\n                                setSavePolygonData(_savePolygonData);\r\n                                theme.form.setFieldsValue({ [name]: list });\r\n                              }}\r\n                              style={{ fontSize: '30px', color: '#08c', cursor: 'pointer' }}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </Form.Item>\r\n                  </RowMainBox>\r\n                ))}\r\n\r\n                <AModal title=\"区域\" visible={VISIBLE} onOk={handleOk} onCancel={handleCancel} destroyOnClose={true}>\r\n                  {_data.state === 'disabled' ? null : (\r\n                    <NButton\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        editPolygon();\r\n                      }}\r\n                    >\r\n                      {mapPolygonEditState === 'disabled' ? '开始编辑' : '结束编辑'}\r\n                    </NButton>\r\n                  )}\r\n\r\n                  {_data.state === 'disabled' ? null : (\r\n                    <NButton\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        delPolygon();\r\n                      }}\r\n                    >\r\n                      删除\r\n                    </NButton>\r\n                  )}\r\n\r\n                  {/* <MapBox id=\"container\"></MapBox> */}\r\n                  <WrapMap>\r\n                    <MainMap\r\n                      version=\"2.0\"\r\n                      events={mapEvents(_data.state)}\r\n                      center={SENTER}\r\n                      zoom={13}\r\n\r\n                      amapkey={amapkey}\r\n                    ></MainMap>\r\n                  </WrapMap>\r\n                </AModal>\r\n\r\n                <AModal\r\n                  title=\"人员选择\"\r\n                  visible={tableVISIBLE}\r\n                  onOk={() => {\r\n                    const ids: any[] = [];\r\n                    const data = SELECTROWKEYS.map((item: { [x: string]: any; id: any; name: any; }) => {\r\n                      ids.push(__.idKey ? item[__.idKey] : item.id);\r\n                      return {\r\n                        ...item,\r\n                        name: __.nameKey ? item[__.nameKey] : item.name,\r\n                        id: __.idKey ? item[__.idKey] : item.id,\r\n                      };\r\n                    });\r\n\r\n                    list[optionIndex].option = data;\r\n                    list[optionIndex].unit = ids;\r\n                    resetList(list);\r\n                    theme.form.setFieldsValue({\r\n                      [name]: list,\r\n                    });\r\n                    setTableVISIBLE(false);\r\n                  }}\r\n                  onCancel={() => setTableVISIBLE(false)}\r\n                >\r\n                  <MixinTable\r\n                    url={__.url}\r\n                    changeKey={tableVISIBLE}\r\n                    params={__.params}\r\n                    columns={__.columnsList}\r\n                    rowSelection={(res: any[], data: any) => {\r\n                      res.map((item01: any, index01: string | number) => {\r\n                        OPTION.map((item02: any) => {\r\n                          if (item01 === item02.id) {\r\n                            data[index01] = item02;\r\n                          }\r\n                        });\r\n                      });\r\n                      setSELECTROWKEYS(data);\r\n                      // setOPTION(data);\r\n                      // setVAL(data)\r\n                    }}\r\n                    rowKey=\"item\"\r\n                    defaultValue={VAL}\r\n                  ></MixinTable>\r\n                </AModal>\r\n              </Form.Item>\r\n            );\r\n            break;\r\n        }\r\n      }}\r\n    </wrapContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default InputNumber;\r\n// export default connect(({  }: ConnectState) => ({\r\n\r\n// }))(Input);\r\n\r\n\r\n"],"names":["amapkey","mapCenter","G","AModal","styled","Modal","WrapMap","MainMap","Map","MapIcon","EnvironmentFilled","SelectTableBox","NButton","Button","RowMainBox","RowBox","Form","map","polyEditor","selItemIndx","ts_polygon","InputNumber","props","list","remove","push","resetList","useDynamicList","theme","useContext","wrapContext","OPTION","setOPTION","useState","VISIBLE","setVISIBLE","tableVISIBLE","setTableVISIBLE","VAL","setVAL","SELECTROWKEYS","setSELECTROWKEYS","mapPolygonEditState","setMapPolygonEditState","savePolygonData","setSavePolygonData","optionIndex","setOptionIndex","_","name","__","useEffect","_list","mapEvents","status","ins","setgeocoder","polygon","data","pointsList","item01","positiveList","item02","selAddress","index","__async","item","handleOk","_savePolygonData","path","polygonList","handleCancel","editPolygon","delPolygon","React","_data","ShowData","value","callback","i","AInput","item2","Tag","PlusCircleOutlined","MinusCircleOutlined","SENTER","ids","__spreadProps","__spreadValues"],"mappings":"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"}
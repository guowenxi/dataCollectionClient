{"version":3,"file":"utils.abb32d8d.js","sources":["../src/utils/utils.tsx"],"sourcesContent":["import {parse} from 'querystring';\nimport pathRegexp from 'path-to-regexp';\nimport type {Route} from '@/models/connect';\nimport {Modal} from 'antd';\n\n// import c from '@/../config/config.json';\n\n// 获取当前路由的方法\n// window.location.href.split(\"#/\")[1].split(\"/\").pop().replace(\"_\",\":\")\n\nexport const downLoadFile = function (file: any) {\n    if (typeof file === 'string') {\n    }\n};\n\n// 将文件类型转换成字符串数组\nexport const filesToStringArrary = function (list: any) {\n    if (typeof list === 'string') return list;\n    if (list === null) return [];\n    const _list: { fileName: any; fileType: any; fileId: any }[] = [];\n    const _ids_list: any[] = [];\n    list.length > 0 &&\n    list.map(function (\n        item: { response: { data: any[] }; name: any; type: any; contentType: any; uid: any },\n    ) {\n        if (item.response) {\n            _list.push({\n                fileName: item.name,\n                fileType: item.type,\n                fileId: item.response.data[0],\n            });\n            _ids_list.push(item.response.data[0]);\n        } else {\n            _list.push({\n                fileName: item.name,\n                fileType: item.contentType,\n                fileId: item.uid,\n            });\n            _ids_list.push(item.uid);\n        }\n    });\n\n    return {_list, _ids_list};\n};\n// 获取数组的params字段默认用来获取rbacToken;\nexport const getUrlParams = function (name: string) {\n    const url2 = window.location.href;\n    const temp2 = url2.split('?')[1];\n    const pram2 = new URLSearchParams(`?${temp2}`);\n    let data = pram2.get(name);\n    if (!data) return '';\n    if (data.indexOf('#/') >= 0) {\n        data = data.split('#/')[0];\n    }\n    return data;\n};\n// 将字符串数据转成数组类型\nexport const stringToArrary = function (data: never[], keys: any[]) {\n    if (!keys) return;\n    keys.map(function (key: string | number) {\n        if (Array.isArray(data[key])) return;\n        data[key] === null ? (data[key] = []) : (data[key] = data[key].split(','));\n    });\n    return data;\n};\n\n\n/* eslint no-useless-escape:0 import/prefer-default-export:0 */\nconst reg = /(((^https?:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+(?::\\d+)?|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/;\n\nexport const isUrl = (path: string): boolean => reg.test(path);\n\nexport const isAntDesignPro = (): boolean => {\n    if (ANT_DESIGN_PRO_ONLY_DO_NOT_USE_IN_YOUR_PRODUCTION === 'site') {\n        return true;\n    }\n    return window.location.hostname === 'preview.pro.ant.design';\n};\n\n// 给官方演示站点用，用于关闭真实开发环境不需要使用的特性\nexport const isAntDesignProOrDev = (): boolean => {\n    const {NODE_ENV} = process.env;\n    if (NODE_ENV === 'development') {\n        return true;\n    }\n    return isAntDesignPro();\n};\n\nexport const getPageQuery = () => parse(window.location.href.split('?')[1]);\n\n/**\n * props.route.routes\n * @param router [{}]\n * @param pathname string\n */\nexport const getAuthorityFromRouter = <T extends Route>(\n    router: T[] = [],\n    pathname: string,\n): T | undefined => {\n    const authority = router.find(\n        ({routes, path = '/'}) =>\n            (path && pathRegexp(path).exec(pathname)) ||\n            (routes && getAuthorityFromRouter(routes, pathname)),\n    );\n    if (authority) return authority;\n    return undefined;\n};\n\nexport const getRouteAuthority = (path: string, routeData: Route[]) => {\n    let authorities: string[] | string | undefined;\n    routeData.forEach((route) => {\n        // match prefix\n        if (pathRegexp(`${route.path}/(.*)`).test(`${path}/`)) {\n            if (route.authority) {\n                authorities = route.authority;\n            }\n            // exact match\n            if (route.path === path) {\n                authorities = route.authority || authorities;\n            }\n            // get children authority recursively\n            if (route.routes) {\n                authorities = getRouteAuthority(path, route.routes) || authorities;\n            }\n        }\n    });\n    return authorities;\n};\n\n// 过滤指定字符串的方法\nexport const filterStr = function (str: string, ft: string): string {\n    return str.indexOf(ft) >= 0 ? str.split(ft)[1] : str;\n};\n\n// 默认加载数据的方法 将方法放在初始化的地方,把数据存入全局\nexport const defaultLoadData = function (dispatch: any) {\n    // 初始化加载的数据 默认name为记载之后赋值的命名, 不建议在没有声明时使用 最好在select内进行声明\n    // 加载街道数据\n    // if (!c.DEFAULTLOADLIST.length) return;\n    // dispatch({\n    //   type: `select/requestDataList`,\n    //   list: c.DEFAULTLOADLIST,\n    // });\n};\n// 将地址的参数拼接的方法\nexport const joinUrl = function (url: string, params: { [x: string]: any; }) {\n    if (params) {\n        const paramsArray: string[] = [];\n        // 拼接参数\n        Object.keys(params).forEach((key) => paramsArray.push(`${key}=${params[key]}`));\n        if (url.search(/\\?/) === -1) {\n            url += `?${paramsArray.join('&')}`;\n        } else {\n            url += `&${paramsArray.join('&')}`;\n        }\n    }\n    return url;\n};\n// 用于将列表里的多个字符串与保存的ids列表进行中文匹配\nexport const filterIdsToName = function (str: string, list: any[]) {\n    if (!str && str !== '0') {\n        return [];\n    }\n    const data: any[] = [];\n    list.map(function (item: { id: { toString: () => string; }; name: any; }) {\n        str.toString().split(',').indexOf(item.id.toString()) >= 0 ? data.push(item.name) : null;\n    });\n    // 返回一个数组\n    return data;\n};\n// 将rangepick 时间选择的数据进行过滤\nexport const filterKeys = function (data: any) {\n    const filterData = {};\n    for (const key in data) {\n        if (key.indexOf('-') >= 0) {\n            key.split('-').map(function (item, idx) {\n                if (!data[key]) {\n                    filterData[item] = undefined;\n                } else if (typeof data[key][idx] === 'object') {\n                    // 目前只针对时间做了优化 未出现有其他是对象的值\n                    filterData[item] = data[key][idx].format('YYYY/MM/DD 00:00:00');\n                } else {\n                    filterData[item] = data[key][idx];\n                }\n            });\n        } else {\n            filterData[key] = data[key];\n        }\n    }\n    return filterData;\n};\n\n// 简略的弹出框方法\nexport const confirmModal = function () {\n    const config = arguments[0];\n    const func = arguments[1];\n    let _: any = {};\n    if (typeof config === 'string') {\n        switch (config) {\n            case 'delete':\n                _ = {\n                    t: '删除',\n                    i: '',\n                    c: '是否删除选中的数据',\n                };\n                break;\n            case 'add':\n                _ = {\n                    t: '添加',\n                    i: '',\n                    c: '是否添加选中的数据',\n                };\n                break;\n        }\n    } else {\n        _ = {\n            t: config.title,\n            i: config.icon,\n            c: config.content,\n        };\n    }\n\n    Modal.confirm({\n        title: _.t,\n        icon: _.i,\n        content: _.c,\n        okText: '确认',\n        cancelText: '取消',\n        onOk: () => {\n            func;\n        },\n    });\n};\n\nexport const $webSocket = {\n    init(name: string | number, url: any) {\n        if (this[name]) return;\n        const ws = new WebSocket(`${url}`);\n        Object.assign(this, {[name]: ws});\n    },\n};\n\n\n// 图片压缩\nexport const compressImg = function (file: any, size: any) {\n    if (!size) size = 0.01;\n    const img = new Image()\n    const reader = new FileReader()// 读取文件资源\n    reader.readAsDataURL(file)\n    return new Promise((resolve) => {\n        reader.onload = function (e) {\n            img.src = e.target.result;\n            img.onload = function () {\n                const {width, height} = img;\n                // 创建画布\n                const canvas = document.createElement('canvas')\n                const context = canvas.getContext('2d')\n                // 设置宽高度为等同于要压缩图片的尺寸\n                canvas.width = width * size;\n                canvas.height = height * size;\n                context.clearRect(0, 0, width * size, width * size)\n                //将img绘制到画布上\n                context.drawImage(img, 0, 0, width * size, width * size);\n                canvas.toBlob(function (blob: any) {\n                    resolve(new window.File([blob], file.name, {type: file.type}))\n                }, \"png\", \"image/jpeg\");\n            }\n        }\n    })\n\n}\n\n\n// return new Promise(resolve => {\n//   const reader = new FileReader();\n//   reader.readAsDataURL(file);\n//   reader.onload = () => {\n//     const img = document.createElement('img');\n//     img.src = reader.result;\n//     img.onload = () => {\n//       const canvas = document.createElement('canvas');\n//       canvas.width = img.naturalWidth;\n//       canvas.height = img.naturalHeight;\n//       const ctx = canvas.getContext('2d');\n//       ctx.drawImage(img, 0, 0);\n//       ctx.fillStyle = 'red';\n//       ctx.textBaseline = 'middle';\n//       ctx.font = '33px Arial';\n//       ctx.fillText('Ant Design', 20, 20);\n//       canvas.toBlob(resolve);\n//     };\n//   };\n// });\nexport const getDateTime = () => {\n    let date = new Date();\n\n    let Y = date.getFullYear() + '-';\n\n    let M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\n\n    let D = date.getDate() + ' ';\n\n    let h = date.getHours() + ':';\n\n    let m = date.getMinutes() + ':';\n\n    let s = date.getSeconds();\n\n    return Y + M + D + h + m + s;\n}\n// Buffer => ArrayBuffer\nexport const toArrayBuffer = (buf) => {\n    var ab = new ArrayBuffer(buf.length);\n    var view = new Uint8Array(ab);\n    for (var i = 0; i < buf.length; ++i) {\n        view[i] = buf[i];\n    }\n    return ab;\n}\n// ArrayBuffer => Buffer\nexport const toBuffer = (ab) => {\n    var buf = new Buffer(ab.byteLength);\n    var view = new Uint8Array(ab);\n    for (var i = 0; i < buf.length; ++i) {\n        buf[i] = view[i];\n    }\n    return buf;\n}\n// ArrayBuffer转字符串\nexport const arrayBuffer2String = (buffer) => {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer))\n}\n\n// ArrayBuffer转16进制字符串\nexport const arrayBuffer2Hex = (buffer) => {\n    const hexArr = Array.prototype.map.call(\n        new Uint8Array(buffer),\n        function (bit) {\n            return ('00' + bit.toString(16)).slice(-2)\n        }\n    )\n    return hexArr.join('')\n}\n// buffer转16进制\nexport const buffer_to_hex = (__buffer)=>{\n    var uarray = Array.prototype.slice.call(__buffer)\n    return uarray.map(el=>Number(el).toString(16))\n}\n"],"names":["getUrlParams","name","temp2","data","filterStr","str","ft","getDateTime","date","Y","M","D","h","m","s","buf","ab","view","i","arrayBuffer2String","buffer","buffer_to_hex","__buffer","uarray","el"],"mappings":"4BA6Ca,MAAAA,EAAe,SAAwBC,EAAA,CAEhD,MAAMC,EADO,OAAO,SAAS,KACV,MAAM,GAAG,EAAE,GAE1B,IAAAC,EADU,IAAI,gBAAgB,IAAID,GAAO,EAC5B,IAAID,CAAI,EACzB,OAAKE,GAAaA,EAAA,QAAA,IAAA,GAAA,IAClBA,EAASA,EAAA,MAAY,IAAA,EAAK,IAE1BA,GAHK,EAIL,EAyEJC,EAAA,SAAAC,EAAAC,EAAA,CAGa,OAAAD,EAAA,QAAAC,CAAA,GAAsB,EAAAD,EAAA,MAAiCC,CAAA,EAAA,GAAAD,CAChE,EAuKSE,EAAc,IAAQ,CAE3B,IAAAC,EAAS,IAAA,KAETC,EAAID,EAAK,YAAa,EAAA,IAEtBE,GAASF,EAAA,SAAA,EAAe,EAAA,GAAA,KAAAA,EAAA,SAAA,EAAA,GAAAA,EAAA,SAAA,EAAA,GAAA,IAExBG,EAAIH,EAAK,QAAW,EAAA,IAExBI,EAAWJ,EAAA,SAAQ,EAAQ,IAC/BK,EAAAL,EAAA,WAAA,EAAA,IAEaM,EAAAN,EAAA,aACT,OAASC,EAAAC,EAAgBC,EAAAC,EAAAC,EAAAC,CACzB,IACwBC,GAAU,CAG3B,QAFHC,MAAc,YAAAD,EAAA,MAAA,EAClBE,EAAA,IAAA,WAAAD,CAAA,EACOE,EAAA,EAAAA,EAAAH,EAAA,OAAA,EAAAG,EACXD,EAAAC,GAAAH,EAAAG,GAGI,OAAUF,CACV,EAYSG,EAA8BC,GACjC,OAAA,aAAe,MAAc,KAAA,IAAA,WAAAA,CAAA,CAAA,EAS1BC,EAAgBC,GAAY,CACrC,IAAIC,EAAS,MAAM,UAAU,MAAM,KAAKD,CAAQ,EACzC,OAAAC,EAAO,IAAIC,GAAI,OAAAA,CAAO,EAAE,SAAE,EAAS,EAC9C"}
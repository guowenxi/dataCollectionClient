{"version":3,"file":"selectLayerTree.f8f140fa.js","sources":["../src/components/TableInfo/fieldFile/selectLayerTree.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {connect} from \"dva\";\r\n\r\nimport { Button, Modal, Tag } from 'antd';\r\nimport type { Iconf } from '../TableInfo';\r\nimport { wrapContext } from '../TableInfo';\r\nimport { ShowData } from './_css_comm';\r\nimport { Form } from 'antd';\r\n\r\nimport TreeBox from '../../TreeBox/TreeBox';\r\nimport MixinTable from '../../MixinTable/MixinTable';\r\n\r\nconst AModal = styled(Modal)`\r\n  && {\r\n    width: 70vw !important;\r\n    .select-tree-modal-box {\r\n      display: flex;\r\n      width: 100%;\r\n      margin-top: 5vh;\r\n      .tree-box-main-box {\r\n        width: 30%;\r\n        margin-right: 1vw;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NButton = styled(Button)`\r\n  margin: 1vh;\r\n`;\r\n\r\nconst DisplayTextBox = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  .text-display {\r\n    margin: 1vh;\r\n    line-height: 32px;\r\n  }\r\n`;\r\n\r\nconst SelectTableBox = styled.div`\r\n  width: 100%;\r\n  border: 1px solid #ccc;\r\n  display: flex;\r\n  align-items: center;\r\n  .select-main-box {\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    .select-item-box {\r\n      margin: 1vh;\r\n    }\r\n  }\r\n`;\r\n\r\ninterface Ioptions {\r\n  name: string;\r\n  id: number;\r\n}\r\ninterface IconfSelect extends Iconf {\r\n  placeholder?: string;\r\n  relationType: string;\r\n  options: Ioptions[];\r\n  defaultValue: string;\r\n}\r\ninterface ISelect {\r\n  dispatch?: any;\r\n  conf: IconfSelect;\r\n  name: string;\r\n  rules: any;\r\n}\r\n\r\nconst SelectTree: React.FC<ISelect> = (props) => {\r\n  const _: any = props.conf;\r\n  const { name } = props;\r\n  const theme: any = useContext(wrapContext);\r\n  const __ = _.tableSetting ? _.tableSetting : {};\r\n\r\n  const [visible, setVISIBLE] = useState(false); /* 模态层状态 */\r\n  const [OPTION, setOPTION] = useState<any>([]); /* 树形数据 */\r\n  const [selTreeListData, setSelTreeListData] = useState(_.defaultValue);\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const selTree = () => {\r\n    setVISIBLE(true);\r\n  };\r\n\r\n  /* 获取数据 */\r\n  function filterData(namespace: string, conf: any) {\r\n    let _op = [];\r\n    if (conf.relationType) {\r\n      _op = props[namespace][conf.relationType];\r\n    } else if (conf.url) {\r\n      // 暂不支持使用url地址\r\n      // let data = useRequest({\r\n      //   url:process.env.ROOT_URL_HTTP+joinUrl(conf.url,conf.params),\r\n      //   method:\"GET\",\r\n      // })\r\n      // setOPTION(data.data);\r\n    } else {\r\n      _op = conf.options;\r\n    }\r\n    setOPTION(_op);\r\n    getDefaultData(_op);\r\n  }\r\n\r\n  // 只在初始化时进行加载\r\n  useEffect(() => {\r\n    filterData('select', _);\r\n  }, []);\r\n\r\n  /* 选中数据 */\r\n  const onCheck = (data: any, info: any) => {\r\n    // if(Array.isArray(data.data[0].userList)){\r\n\r\n    // }\r\n    if (__.getValueKey) {\r\n      switch (__.getValueKey) {\r\n        case 'item':\r\n          setSelTreeListData(data);\r\n          setTableData(info.checkedNodes);\r\n          break;\r\n      }\r\n    } else {\r\n      setSelTreeListData(info.checkedNodes);\r\n      setTableData(info.checkedNodes[0].userList);\r\n    }\r\n  };\r\n  /* 选中数据 */\r\n  const onSelect = (data: any) => {\r\n    setSelTreeListData(data.list);\r\n    if (Array.isArray(data.data[0].userList)) {\r\n    }\r\n    setTableData(data.data);\r\n  };\r\n\r\n  /* 取消弹框 */\r\n  const cancelModal = () => {\r\n    setVISIBLE(false);\r\n  };\r\n\r\n  /* 展示数据 */\r\n  const displayText = () => {\r\n    const info = theme.form.getFieldValue(name);\r\n    const list: any = [];\r\n    if (Array.isArray(info)) {\r\n      OPTION.map((item01: any) => {\r\n        info.map((item02: any) => {\r\n          if (item01.id === item02) {\r\n            list.push(item01.name);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return list;\r\n  };\r\n\r\n  /* 赋初始值 */\r\n  const getDefaultData = (optionList: any) => {\r\n    const info = theme.form.getFieldValue(name);\r\n    const list: any = [];\r\n    if (Array.isArray(info)) {\r\n      optionList.map((item01: any) => {\r\n        info.map((item02: any) => {\r\n          if (item01.id === item02) {\r\n            list.push(item01);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    setSelTreeListData(info);\r\n    setTableData(list);\r\n  };\r\n\r\n  return (\r\n    <wrapContext.Consumer>\r\n      {(_data: any): any => {\r\n        switch (_data.state) {\r\n          case 'default':\r\n            // return <ShowData>{VAL}</ShowData>;\r\n            return <ShowData></ShowData>;\r\n            break;\r\n          case 'edit':\r\n          case 'new':\r\n          case 'disabled':\r\n            return (\r\n              <DisplayTextBox>\r\n                <Form.Item name={name} noStyle rules={props.rules}>\r\n                  {/* <NButton onClick={selTree}>选择</NButton>\r\n                  <div className=\"text-display\">{displayText()}</div> */}\r\n                  <SelectTableBox>\r\n                    <div className=\"select-main-box\">\r\n                      {Array.isArray(displayText())\r\n                        ? displayText().map((item: any) => {\r\n                            return (\r\n                              <Tag\r\n                                className=\"select-item-box\"\r\n                                // closable\r\n                                // onClose={e => {\r\n                                //   e.preventDefault();\r\n                                //   deleteTableData(item,idx)\r\n                                // }}\r\n                              >\r\n                                {item}\r\n                              </Tag>\r\n                            );\r\n                          })\r\n                        : ''}\r\n                    </div>\r\n                    <NButton type=\"primary\" onClick={() => selTree()}>\r\n                      选择\r\n                    </NButton>\r\n                  </SelectTableBox>\r\n                </Form.Item>\r\n                <AModal\r\n                  visible={visible}\r\n                  onOk={() => {\r\n                    cancelModal();\r\n                    theme.form.setFieldsValue({\r\n                      [name]: selTreeListData,\r\n                    });\r\n                  }}\r\n                  onCancel={() => {\r\n                    cancelModal();\r\n                    const info = theme.form.getFieldValue(name);\r\n                    theme.form.setFieldsValue({\r\n                      [name]: info,\r\n                    });\r\n                    getDefaultData(OPTION);\r\n                  }}\r\n                >\r\n                  <div className={'select-tree-modal-box'}>\r\n                    <TreeBox\r\n                      data={OPTION}\r\n                      selectable={false}\r\n                      onCheck={onCheck}\r\n                      onSelect={onSelect}\r\n                      checkedTreeKeys={selTreeListData}\r\n                      className={'tree-box-main-box'}\r\n                    ></TreeBox>\r\n                    <MixinTable\r\n                      columns={__.columnList}\r\n                      data={tableData}\r\n                      handle={[\r\n                        {\r\n                          type: 'popconfirm',\r\n                          bolName: '删除',\r\n                          click: (text: any, record: any, search: any) => {\r\n                            tableData.map((item: any, idx: number) => {\r\n                              if (item.key == text.key) {\r\n                                tableData.splice(idx, 1);\r\n                              }\r\n                            });\r\n                            setTableData(tableData);\r\n                            search.reset();\r\n                            if (__.getValueKey) {\r\n                              switch (__.getValueKey) {\r\n                                case 'item':\r\n                                  const list: any = [];\r\n                                  tableData.map((item: any) => {\r\n                                    list.push(item.id);\r\n                                  });\r\n                                  setSelTreeListData(list);\r\n                                  break;\r\n                              }\r\n                            }\r\n                          },\r\n                          config: {\r\n                            okText: '确认',\r\n                            cancelText: '取消',\r\n                            title: '是否确认删除？',\r\n                          },\r\n                        },\r\n                      ]}\r\n                      changeKey={tableData}\r\n                    ></MixinTable>\r\n                  </div>\r\n                </AModal>\r\n              </DisplayTextBox>\r\n            );\r\n            break;\r\n        }\r\n      }}\r\n    </wrapContext.Consumer>\r\n  );\r\n};\r\nexport default connect(({ select }: { select: any }) => ({\r\n  select,\r\n}))(SelectTree);\r\n"],"names":["AModal","styled","Modal","NButton","Button","DisplayTextBox","SelectTableBox","SelectTree","props","_","name","theme","useContext","wrapContext","__","visible","setVISIBLE","useState","OPTION","setOPTION","setSelTreeListData","tableData","setTableData","selTree","namespace","conf","_op","getDefaultData","useEffect","filterData","onCheck","data","info","onSelect","cancelModal","displayText","list","item01","item02","optionList","React","_data","Form","item","Tag","selTreeListData","TreeBox","MixinTable","text","record","search","idx","selectLayerTree","connect","select"],"mappings":"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"}
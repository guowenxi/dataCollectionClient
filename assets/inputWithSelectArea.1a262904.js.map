{"version":3,"file":"inputWithSelectArea.1a262904.js","sources":["../src/components/TableInfo/fieldFile/inputWithSelectArea.tsx"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {connect} from \"dva\";\r\nimport { Input as AInput, Modal, Button } from 'antd';\r\nimport type { Iconf} from '../TableInfo';\r\nimport { wrapContext } from '../TableInfo';\r\nimport { ShowData } from './_css_comm';\r\nimport { EnvironmentFilled } from '@ant-design/icons';\r\nimport { Map } from 'react-amap';\r\nimport type { AProps } from '@/globalTyping';\r\n\r\nimport { Form } from 'antd';\r\nimport { G } from '@/global';\r\n\r\nconst { amapkey, mapCenter } = G;\r\nconst Minput = styled(AInput)`\r\n  && {\r\n    height: 100%;\r\n    padding: 1vh;\r\n  }\r\n`;\r\n\r\nconst MapIcon = styled(EnvironmentFilled)`\r\n  color: #ccc;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  right: 10px;\r\n  font-size: 20px;\r\n  top: 10px;\r\n`;\r\n\r\ninterface IconfInput extends Iconf {\r\n  /**\r\n   * 输入框的默认值\r\n   */\r\n  defaultValue: string;\r\n  /**\r\n   * 所选区域的名称\r\n   */\r\n  areaName: any;\r\n  /**\r\n   * 默认输入框的提示文字\r\n   */\r\n  placeholder?: string;\r\n  /**\r\n   * 输入框的大小\r\n   */\r\n  size: \"small\" | \"large\" | \"middle\" | undefined;\r\n}\r\ninterface MProps extends AProps {\r\n  dispatch?: any;\r\n  /**\r\n   * 一些配置\r\n   */\r\n  conf: IconfInput;\r\n  /**\r\n   * 名称\r\n   */\r\n  name: string;\r\n  /**\r\n   * 是否必填\r\n   */\r\n  rules: any;\r\n}\r\n\r\nconst AModal = styled(Modal)`\r\n  && {\r\n    width: 70vw !important;\r\n    .ant-modal {\r\n    }\r\n  }\r\n`;\r\n\r\nconst NButton = styled(Button)`\r\n  margin: 0 1vh;\r\n`;\r\nconst Wrapmap = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 60vh;\r\n`;\r\nconst MainMap = styled<any>(Map)`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\n\r\nconst RowBox = styled(Form.Item)`\r\n  .ant-form-item-control-input-content {\r\n    display: flex;\r\n  }\r\n  .row-item {\r\n    width: 100%;\r\n    position: absolute;\r\n  }\r\n  .row-map-item {\r\n    position: absolute;\r\n    width: 100px;\r\n    right: 0;\r\n  }\r\n`;\r\n\r\nlet map: any = {};\r\n/**\r\n * 线段编辑对象\r\n */\r\nlet polyEditor: any;\r\n/**\r\n * 选择区域时暂存数据的变量\r\n */\r\nlet ts_polygon: any;\r\n\r\nconst InputWithSelectArea = (props: MProps) => {\r\n  const _ = props.conf;\r\n  const theme = useContext(wrapContext);\r\n  const {name} = props;\r\n  const [savePolygonData, setSavePolygonData] = useState<any>(''); /* 保存的当前地点数据 */\r\n  const [VISIBLE, setVISIBLE] = useState(false);\r\n  const [mapPolygonEditState, setMapPolygonEditState] = useState('edit'); /* 线路编辑状态 */\r\n  const [polyginList, setPolyginList] = useState([]); /* 保存的数据 */\r\n  const [SENTER] = useState(mapCenter);\r\n  const [, setgeocoder] = useState({});\r\n\r\n  /* 确定地址选择 */\r\n  const mapEvents = (status: string) => {\r\n    return {\r\n      created: (ins: any) => {\r\n        // setmap(ins)\r\n        map = ins;\r\n        AMap.plugin('AMap.Geocoder', () => {\r\n          setgeocoder(\r\n            new AMap.Geocoder({\r\n              city: '010', // 城市，默认：“全国”\r\n            }),\r\n          );\r\n        });\r\n        AMap.plugin('AMap.PolygonEditor', () => {\r\n          polyEditor = new AMap.PolygonEditor(map);\r\n\r\n          // 只在初始化的时候加载\r\n          const pointsList = theme.form.getFieldValue([_.areaName]);\r\n          const list: number[][] | any = [];\r\n          if (Array.isArray(pointsList)) {\r\n            pointsList.map((item01: any) => {\r\n              list.push([Number(item01.x), Number(item01.y)]);\r\n            });\r\n          }\r\n          let polygon = new AMap.Polygon({\r\n            path: list,\r\n          });\r\n          map.clearMap();\r\n          map.add(polygon);\r\n          if (status != 'disabled') {\r\n            if (status === 'edit') {\r\n              ts_polygon = polygon;\r\n              setSavePolygonData(polygon);\r\n              polyEditor.setTarget(polygon);\r\n            } else {\r\n              polyEditor.setTarget();\r\n            }\r\n            polyEditor.open();\r\n          } else {\r\n            setSavePolygonData(polygon);\r\n            ts_polygon = polygon;\r\n          }\r\n          \r\n          polyEditor.on('add', function (data: { target: any; }) {\r\n            console.log(data);\r\n            polygon = data.target;\r\n            polyEditor.addAdsorbPolygons(polygon);\r\n            //  polygon.on('dblclick', (data) => {\r\n            //   setMapPolygonEditState('edit')\r\n            //   polyEditor.setTarget(data.target);\r\n            //   polyEditor.open();\r\n            // })\r\n            // 暂存数据 在弹框点击确定的时候进行保存\r\n            ts_polygon = polygon;\r\n          });\r\n\r\n        });\r\n      },\r\n      click: () => {},\r\n    };\r\n  };\r\n\r\n  const selAddress = async (status: string) => {\r\n    // const data = theme.form.getFieldsValue();\r\n    setVISIBLE(true);\r\n    setMapPolygonEditState('edit');\r\n    if (savePolygonData) {\r\n      map.add(savePolygonData);\r\n    }\r\n    if (status === 'disabled') {\r\n      return\r\n    }\r\n    if (polyEditor) {\r\n      if (polyEditor) {\r\n        // 如已有对象则编辑对象\r\n        polyEditor.setTarget(savePolygonData);\r\n      } else {\r\n        // 在新设置多边形时先要将之前的编辑对象清空\r\n        polyEditor.setTarget();\r\n      }\r\n      polyEditor.open();\r\n    }\r\n  };\r\n\r\n  const handleOk = () => {\r\n    // 保存数据\r\n    const _savePolygonData = ts_polygon;\r\n    if (_savePolygonData) {\r\n      const path = _savePolygonData.getPath();\r\n      const polygonList: { x: any; y: any; }[] = [];\r\n      if (Array.isArray(path)) {\r\n        path.map((item01: any) => {\r\n          polygonList.push({\r\n            x: item01.lng,\r\n            y: item01.lat,\r\n          });\r\n        });\r\n      }\r\n      const _polyginList = polyginList;\r\n\r\n      setPolyginList(_polyginList);\r\n      theme.form.setFields([\r\n        {\r\n          name: [_.areaName],\r\n          value: _polyginList,\r\n        },\r\n      ]);\r\n    }\r\n    setSavePolygonData(_savePolygonData);\r\n    map.clearMap();\r\n    setVISIBLE(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    polyEditor.removeAdsorbPolygons(savePolygonData);\r\n    map.clearMap();\r\n    setVISIBLE(false);\r\n  };\r\n\r\n  /* 网格编辑 */\r\n  const editPolygon = () => {\r\n    if (!polyEditor) {\r\n      return;\r\n    }\r\n    switch (mapPolygonEditState) {\r\n      case 'edit':\r\n        polyEditor.close();\r\n        break;\r\n      case 'disabled':\r\n        polyEditor.open();\r\n        break;\r\n    }\r\n    setMapPolygonEditState(mapPolygonEditState == 'edit' ? 'disabled' : 'edit');\r\n  };\r\n\r\n  /* 删除当前区域编辑的多边形 */\r\n  const delPolygon = () => {\r\n    ts_polygon = '';\r\n    polyEditor.removeAdsorbPolygons(savePolygonData);\r\n    map.clearMap();\r\n    polyEditor.setTarget();\r\n    polyEditor.open();\r\n  };\r\n\r\n  return (\r\n    <wrapContext.Consumer>\r\n      {(_data) => {\r\n        switch (_data.state) {\r\n          case 'default':\r\n            return <ShowData>{_.defaultValue || '　'}</ShowData>;\r\n            break;\r\n          case 'edit':\r\n          case 'new':\r\n          case 'disabled':\r\n            return (\r\n              <RowBox>\r\n                <Form.Item name={name} rules={props.rules} className=\"row-item\">\r\n                  <Minput\r\n                    style={_.style}\r\n                    disabled={_data.state === 'disabled'}\r\n                    placeholder={_.placeholder}\r\n                    size={_.size}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name={_.areaName}\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: '请选择区域',\r\n                    },\r\n                  ]}\r\n                  className=\"row-map-item\"\r\n                >\r\n                  <MapIcon\r\n                    onClick={() => {\r\n                      selAddress(_data.state);\r\n                    }}\r\n                    style={{\r\n                      position: 'absolute',\r\n                      color: ' #ccc',\r\n                      cursor: 'pointer',\r\n                      right: '10px',\r\n                      fontSize: '20px',\r\n                      top: '10px',\r\n                    }}\r\n                  />\r\n                </Form.Item>\r\n                <AModal title=\"区域\" visible={VISIBLE} onOk={handleOk} onCancel={handleCancel}>\r\n                  {_data.state === 'disabled' ? null : (\r\n                    <NButton\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        editPolygon();\r\n                      }}\r\n                    >\r\n                      {mapPolygonEditState === 'disabled' ? '开始编辑' : '结束编辑'}\r\n                    </NButton>\r\n                  )}\r\n\r\n                  {_data.state === 'disabled' ? null : (\r\n                    <NButton\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        delPolygon();\r\n                      }}\r\n                    >\r\n                      删除\r\n                    </NButton>\r\n                  )}\r\n                  {/* <MapBox id=\"container\"></MapBox> */}\r\n                  <Wrapmap>\r\n                    <MainMap\r\n                      version=\"2.0\"\r\n                      events={mapEvents(_data.state)}\r\n                      center={SENTER}\r\n                      zoom={13}\r\n                      amapkey={amapkey}\r\n                    ></MainMap>\r\n                  </Wrapmap>\r\n                </AModal>\r\n              </RowBox>\r\n            );\r\n            break;\r\n        }\r\n      }}\r\n    </wrapContext.Consumer>\r\n  );\r\n};\r\nexport default connect(({}) => ({}))(InputWithSelectArea);\r\n"],"names":["amapkey","mapCenter","G","Minput","styled","AInput","MapIcon","EnvironmentFilled","AModal","Modal","NButton","Button","Wrapmap","MainMap","Map","RowBox","Form","map","polyEditor","ts_polygon","InputWithSelectArea","props","_","theme","useContext","wrapContext","name","savePolygonData","setSavePolygonData","useState","VISIBLE","setVISIBLE","mapPolygonEditState","setMapPolygonEditState","polyginList","setPolyginList","SENTER","setgeocoder","mapEvents","status","ins","pointsList","list","item01","polygon","data","selAddress","__async","handleOk","_savePolygonData","path","polygonList","_polyginList","handleCancel","editPolygon","delPolygon","React","_data","ShowData","inputWithSelectArea","connect"],"mappings":"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"}